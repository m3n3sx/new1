window.LAS=window.LAS ||{};class LASCoreManager{constructor(){this.modules=new Map();this.config=window.lasAdminData ||{};this.initialized=false;this.eventListeners=new Map();this.initializationPromise=null;this.init=this.init.bind(this);this.handleError=this.handleError.bind(this);this.emit=this.emit.bind(this);this.get=this.get.bind(this);}async init(){if(this.initializationPromise){return this.initializationPromise;}this.initializationPromise=this._performInit();return this.initializationPromise;}async _performInit(){try{console.log('LAS: Starting Core Manager initialization...');if(!this.config || !this.config.ajax_url){throw new Error('LAS configuration is missing or invalid');}this.modules.set('compatibility',new BrowserCompatibility());await this.modules.get('compatibility').loadPolyfills();if(!this.modules.get('compatibility').isBrowserSupported()){this.modules.get('compatibility').showCompatibilityWarning();}this.modules.set('error',new LASErrorHandler(this));await this._initializeModule('error');const moduleInitOrder=[{name: 'performance',class: LASPerformanceMonitor},{name: 'memory',class: LASMemoryManager},{name: 'ajax',class: LASAjaxManager},{name: 'settings',class: LASSettingsManager},{name: 'preview',class: LASLivePreviewEngine}];for(const moduleInfo of moduleInitOrder){try{if(typeof moduleInfo.class !=='undefined'){this.modules.set(moduleInfo.name,new moduleInfo.class(this));await this._initializeModule(moduleInfo.name);console.log(`LAS: ${moduleInfo.name}module initialized successfully`);}else{console.warn(`LAS: ${moduleInfo.class.name}class not found,skipping ${moduleInfo.name}module`);}}catch(error){console.error(`LAS: Failed to initialize ${moduleInfo.name}module:`,error);this.handleError(error,`Failed to initialize ${moduleInfo.name}module`);}}this.bindFormElements();this.setupGlobalEventListeners();this.initialized=true;this.emit('core:ready',{timestamp: Date.now(),modules: Array.from(this.modules.keys())});console.log('LAS: Core Manager initialization complete');console.log('LAS: Initialized modules:',Array.from(this.modules.keys()));}catch(error){console.error('LAS: Core Manager initialization failed:',error);this.handleError(error,'Core Manager initialization failed');throw error;}}async _initializeModule(moduleName){const module=this.modules.get(moduleName);if(!module){throw new Error(`Module ${moduleName}not found`);}if(typeof module.init==='function'){await module.init();}}get(moduleName){return this.modules.get(moduleName)|| null;}isInitialized(){return this.initialized;}emit(eventName,data=null){const event=new CustomEvent(eventName,{detail: data,bubbles: true,cancelable: true});document.dispatchEvent(event);if(this.config.debug){console.log(`LAS Event: ${eventName}`,data);}}on(eventName,callback,options={}){const listener=(event)=> callback(event.detail,event);document.addEventListener(eventName,listener,options);if(!this.eventListeners.has(eventName)){this.eventListeners.set(eventName,[]);}this.eventListeners.get(eventName).push({callback,listener,options});}off(eventName,callback){const listeners=this.eventListeners.get(eventName);if(!listeners)return;const index=listeners.findIndex(l=> l.callback===callback);if(index !==-1){const{listener}=listeners[index];document.removeEventListener(eventName,listener);listeners.splice(index,1);}}handleError(error,context='Unknown'){console.error(`LAS Error [${context}]:`,error);const errorHandler=this.get('error');if(errorHandler && typeof errorHandler.showError==='function'){errorHandler.showError(`${context}: ${error.message}`);}this.emit('core:error',{error: error,context: context,timestamp: Date.now()});}bindFormElements(){try{console.log('LAS: Binding form elements...');const settingsManager=this.get('settings');if(!settingsManager){console.warn('LAS: Settings manager not available,skipping form binding');return;}this.formElementBinder=new LASFormElementBinder(this,settingsManager);this.formElementBinder.bindAllElements();console.log('LAS: Form elements bound successfully');}catch(error){this.handleError(error,'Form element binding');}}bindColorPickers(settingsManager){const colorPickers=document.querySelectorAll('input[type="color"],.las-color-picker');colorPickers.forEach(picker=>{const settingKey=picker.dataset.setting || picker.name;if(!settingKey)return;picker.addEventListener('change',(e)=>{settingsManager.set(settingKey,e.target.value);});picker.addEventListener('input',(e)=>{settingsManager.set(settingKey,e.target.value,{skipSave: true});});});}bindTextInputs(settingsManager){const textInputs=document.querySelectorAll('input[type="text"],input[type="url"],textarea');textInputs.forEach(input=>{const settingKey=input.dataset.setting || input.name;if(!settingKey)return;let debounceTimer;input.addEventListener('input',(e)=>{if(debounceTimer){clearTimeout(debounceTimer);}debounceTimer=setTimeout(()=>{settingsManager.set(settingKey,e.target.value);},300);});});}bindSliders(settingsManager){const sliders=document.querySelectorAll('input[type="range"],.las-slider');sliders.forEach(slider=>{const settingKey=slider.dataset.setting || slider.name;if(!settingKey)return;slider.addEventListener('input',(e)=>{settingsManager.set(settingKey,e.target.value,{skipSave: true});});slider.addEventListener('change',(e)=>{settingsManager.set(settingKey,e.target.value);});});}bindToggles(settingsManager){const toggles=document.querySelectorAll('input[type="checkbox"],.las-toggle');toggles.forEach(toggle=>{const settingKey=toggle.dataset.setting || toggle.name;if(!settingKey)return;toggle.addEventListener('change',(e)=>{const value=e.target.type==='checkbox' ? e.target.checked : e.target.value;settingsManager.set(settingKey,value);});});}bindDropdowns(settingsManager){const dropdowns=document.querySelectorAll('select,.las-dropdown');dropdowns.forEach(dropdown=>{const settingKey=dropdown.dataset.setting || dropdown.name;if(!settingKey)return;dropdown.addEventListener('change',(e)=>{settingsManager.set(settingKey,e.target.value);});});}setupGlobalEventListeners(){window.addEventListener('beforeunload',()=>{this.cleanup();});document.addEventListener('visibilitychange',()=>{if(document.hidden){this.emit('core:hidden');}else{this.emit('core:visible');}});window.addEventListener('online',()=>{this.emit('core:online');});window.addEventListener('offline',()=>{this.emit('core:offline');});}cleanup(){console.log('LAS: Cleaning up Core Manager...');try{for(const [name,module] of this.modules){if(typeof module.cleanup==='function'){module.cleanup();}}for(const [eventName,listeners] of this.eventListeners){listeners.forEach(({listener})=>{document.removeEventListener(eventName,listener);});}this.eventListeners.clear();this.modules.clear();this.initialized=false;this.initializationPromise=null;console.log('LAS: Core Manager cleanup complete');}catch(error){console.error('LAS: Error during cleanup:',error);}}}class LASErrorHandler{constructor(core){this.core=core;this.notificationContainer=null;this.loadingIndicator=null;this.notifications=[];this.maxNotifications=5;this.defaultDuration=5000;this.init=this.init.bind(this);this.handleError=this.handleError.bind(this);this.showNotification=this.showNotification.bind(this);this.showSuccess=this.showSuccess.bind(this);this.showError=this.showError.bind(this);this.showWarning=this.showWarning.bind(this);this.showInfo=this.showInfo.bind(this);this.showLoading=this.showLoading.bind(this);}async init(){try{console.log('LAS: Initializing Error Handler...');this.createNotificationContainer();this.createLoadingIndicator();this.injectStyles();this.bindGlobalErrorHandlers();this.setupKeyboardShortcuts();console.log('LAS: Error Handler initialized successfully');}catch(error){console.error('LAS: Failed to initialize Error Handler:',error);throw error;}}createNotificationContainer(){if(this.notificationContainer)return;this.notificationContainer=document.createElement('div');this.notificationContainer.id='las-notifications';this.notificationContainer.className='las-notifications-container';this.notificationContainer.setAttribute('role','alert');this.notificationContainer.setAttribute('aria-live','polite');document.body.appendChild(this.notificationContainer);}createLoadingIndicator(){if(this.loadingIndicator)return;this.loadingIndicator=document.createElement('div');this.loadingIndicator.id='las-loading';this.loadingIndicator.className='las-loading hidden';this.loadingIndicator.innerHTML=` <div class="las-spinner"></div> <span class="las-loading-text">Processing...</span> `;document.body.appendChild(this.loadingIndicator);}injectStyles(){if(document.getElementById('las-error-handler-styles'))return;const styles=document.createElement('style');styles.id='las-error-handler-styles';styles.textContent=` .las-notifications-container{position: fixed;top: 32px;right: 20px;z-index: 999999;max-width: 400px;pointer-events: none;}.las-notification{background: #fff;border-left: 4px solid #0073aa;box-shadow: 0 2px 8px rgba(0,0,0,0.1);margin-bottom: 10px;padding: 12px 16px;border-radius: 4px;pointer-events: auto;opacity: 0;transform: translateX(100%);transition: all 0.3s ease;position: relative;word-wrap: break-word;max-width: 100%;}.las-notification.show{opacity: 1;transform: translateX(0);}.las-notification.error{border-left-color: #dc3232;}.las-notification.warning{border-left-color: #ffb900;}.las-notification.success{border-left-color: #46b450;}.las-notification.info{border-left-color: #00a0d2;}.las-notification__content{display: flex;justify-content: space-between;align-items: flex-start;}.las-notification__message{font-size: 14px;color: #23282d;margin: 0;line-height: 1.4;flex: 1;}.las-notification__close{background: none;border: none;font-size: 18px;cursor: pointer;color: #666;padding: 0;margin-left: 10px;line-height: 1;flex-shrink: 0;}.las-notification__close:hover{color: #000;}.las-notification__actions{margin-top: 8px;display: flex;gap: 8px;flex-wrap: wrap;}.las-notification__action{background: #0073aa;color: #fff;border: none;padding: 4px 8px;border-radius: 3px;font-size: 12px;cursor: pointer;text-decoration: none;display: inline-block;}.las-notification__action:hover{background: #005a87;color: #fff;}.las-notification__action.secondary{background: #f1f1f1;color: #555;}.las-notification__action.secondary:hover{background: #e1e1e1;color: #000;}.las-loading{position: fixed;top: 50%;left: 50%;transform: translate(-50%,-50%);background: rgba(255,255,255,0.95);border: 1px solid #ddd;border-radius: 4px;padding: 20px;z-index: 1000000;display: flex;align-items: center;gap: 12px;box-shadow: 0 4px 12px rgba(0,0,0,0.1);}.las-loading.hidden{display: none;}.las-spinner{width: 20px;height: 20px;border: 2px solid #f3f3f3;border-top: 2px solid #0073aa;border-radius: 50%;animation: las-spin 1s linear infinite;}@keyframes las-spin{0%{transform: rotate(0deg);}100%{transform: rotate(360deg);}}.las-loading-text{font-size: 14px;color: #23282d;}@media(max-width: 782px){.las-notifications-container{top: 46px;right: 10px;left: 10px;max-width: none;}}`;document.head.appendChild(styles);}bindGlobalErrorHandlers(){window.addEventListener('error',(event)=>{if(event.filename && event.filename.includes('live-admin-styler')){this.handleGlobalError({message: event.message,source: event.filename,line: event.lineno,column: event.colno,error: event.error,type: 'javascript'});}});window.addEventListener('unhandledrejection',(event)=>{this.handleGlobalError({message: event.reason ? event.reason.toString(): 'Unhandled promise rejection',source: 'promise',type: 'promise',error: event.reason});});}setupKeyboardShortcuts(){document.addEventListener('keydown',(e)=>{if(e.keyCode===27){this.dismissAll();}});}handleGlobalError(errorInfo){console.error('LAS Global Error:',errorInfo);this.showError('An unexpected error occurred',{details: errorInfo.message,persistent: true});if(this.core){this.core.emit('error:global',errorInfo);}}handleError(error,context='Unknown'){console.error(`LAS Error [${context}]:`,error);this.showError(`${context}: ${error.message}`,{persistent: true});if(this.core){this.core.emit('error:handled',{error: error,context: context,timestamp: Date.now()});}}showNotification(message,type='info',options={}){const{duration=this.defaultDuration,persistent=false,actions=[],details=null}=options;if(this.notifications.length >=this.maxNotifications){const oldest=this.notifications.shift();this.removeNotification(oldest.element);}const notification=document.createElement('div');notification.className=`las-notification las-notification--${type}`;let content=` <div class="las-notification__content"> <div class="las-notification__message"> ${this.escapeHtml(message)}${details ? `<br><small>${this.escapeHtml(details)}</small>` : ''}</div> <button class="las-notification__close" aria-label="Close">&times;</button> </div> `;if(actions.length > 0){content+='<div class="las-notification__actions">';actions.forEach(action=>{const className=action.secondary ? 'las-notification__action secondary' : 'las-notification__action';content+=`<button class="${className}" data-action="${action.id || ''}">${this.escapeHtml(action.text)}</button>`;});content+='</div>';}notification.innerHTML=content;const closeBtn=notification.querySelector('.las-notification__close');closeBtn.addEventListener('click',()=>{this.removeNotification(notification);});actions.forEach(action=>{const actionBtn=notification.querySelector(`[data-action="${action.id || ''}"]`);if(actionBtn && typeof action.callback==='function'){actionBtn.addEventListener('click',()=>{action.callback();if(!action.keepOpen){this.removeNotification(notification);}});}});this.notificationContainer.appendChild(notification);requestAnimationFrame(()=>{notification.classList.add('show');});const notificationObj={element: notification,type: type,timestamp: Date.now()};this.notifications.push(notificationObj);if(!persistent && duration > 0){setTimeout(()=>{this.removeNotification(notification);},duration);}return notificationObj;}removeNotification(notification){if(!notification || !notification.parentNode)return;notification.classList.remove('show');setTimeout(()=>{if(notification.parentNode){notification.parentNode.removeChild(notification);}const index=this.notifications.findIndex(n=> n.element===notification);if(index !==-1){this.notifications.splice(index,1);}},300);}showSuccess(message,options={}){return this.showNotification(message,'success',options);}showError(message,options={}){return this.showNotification(message,'error',{persistent: true,...options});}showWarning(message,options={}){return this.showNotification(message,'warning',options);}showInfo(message,options={}){return this.showNotification(message,'info',options);}showLoading(show,message='Processing...'){if(!this.loadingIndicator)return;if(show){const textElement=this.loadingIndicator.querySelector('.las-loading-text');if(textElement){textElement.textContent=message;}this.loadingIndicator.classList.remove('hidden');}else{this.loadingIndicator.classList.add('hidden');}}dismissAll(){this.notifications.forEach(notification=>{this.removeNotification(notification.element);});}escapeHtml(text){const div=document.createElement('div');div.textContent=text;return div.innerHTML;}cleanup(){console.log('LAS: Cleaning up Error Handler...');try{this.dismissAll();if(this.notificationContainer && this.notificationContainer.parentNode){this.notificationContainer.parentNode.removeChild(this.notificationContainer);}if(this.loadingIndicator && this.loadingIndicator.parentNode){this.loadingIndicator.parentNode.removeChild(this.loadingIndicator);}const styles=document.getElementById('las-error-handler-styles');if(styles && styles.parentNode){styles.parentNode.removeChild(styles);}this.notificationContainer=null;this.loadingIndicator=null;this.notifications=[];console.log('LAS: Error Handler cleanup complete');}catch(error){console.error('LAS: Error during Error Handler cleanup:',error);}}}class LASAjaxManager{constructor(core){this.core=core;this.requestQueue=[];this.isProcessing=false;this.retryAttempts=new Map();this.maxRetries=3;this.baseDelay=1000;this.timeout=10000;this.requestHistory=[];this.maxHistorySize=50;this.abortControllers=new Map();this.init=this.init.bind(this);this.saveSettings=this.saveSettings.bind(this);this.loadSettings=this.loadSettings.bind(this);this.queueRequest=this.queueRequest.bind(this);this.processQueue=this.processQueue.bind(this);this.executeRequest=this.executeRequest.bind(this);this.handleRequestError=this.handleRequestError.bind(this);this.cleanup=this.cleanup.bind(this);}async init(){try{console.log('LAS: Initializing AJAX Manager...');if(!this.core.config.ajax_url){throw new Error('AJAX URL not configured');}if(!this.core.config.nonce){throw new Error('Security nonce not configured');}this.setupEventListeners();await this.testConnection();console.log('LAS: AJAX Manager initialized successfully');}catch(error){console.error('LAS: Failed to initialize AJAX Manager:',error);throw error;}}setupEventListeners(){this.core.on('core:online',()=>{console.log('LAS: Connection restored,processing queued requests');this.processQueue();});this.core.on('core:offline',()=>{console.log('LAS: Connection lost,requests will be queued');this.core.get('error')?.showWarning('Connection lost. Changes will be saved when connection is restored.');});this.core.on('core:hidden',()=>{this.pauseProcessing=true;});this.core.on('core:visible',()=>{this.pauseProcessing=false;this.processQueue();});}async testConnection(){try{const response=await fetch(this.core.config.ajax_url,{method: 'POST',headers:{'Content-Type': 'application/x-www-form-urlencoded',},body: new URLSearchParams({action: 'las_test_connection',nonce: this.core.config.nonce}),signal: AbortSignal.timeout(5000)});if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}console.log('LAS: AJAX connection test successful');}catch(error){console.warn('LAS: AJAX connection test failed:',error.message);}}async saveSettings(settings,options={}){const request={id: this.generateRequestId(),action: 'las_save_settings',data: settings,nonce: this.core.config.nonce,timestamp: Date.now(),type: 'save_settings',priority: options.priority || 'normal',...options};return this.queueRequest(request);}async loadSettings(options={}){const request={id: this.generateRequestId(),action: 'las_load_settings',data:{},nonce: this.core.config.nonce,timestamp: Date.now(),type: 'load_settings',priority: options.priority || 'high',...options};return this.queueRequest(request);}async resetSettings(options={}){const request={id: this.generateRequestId(),action: 'las_reset_settings',data:{},nonce: this.core.config.nonce,timestamp: Date.now(),type: 'reset_settings',priority: options.priority || 'high',...options};return this.queueRequest(request);}async exportSettings(options={}){const request={id: this.generateRequestId(),action: 'las_export_settings',data:{},nonce: this.core.config.nonce,timestamp: Date.now(),type: 'export_settings',priority: options.priority || 'normal',...options};return this.queueRequest(request);}async importSettings(settings,options={}){const request={id: this.generateRequestId(),action: 'las_import_settings',data:{settings},nonce: this.core.config.nonce,timestamp: Date.now(),type: 'import_settings',priority: options.priority || 'high',...options};return this.queueRequest(request);}queueRequest(request){return new Promise((resolve,reject)=>{request.resolve=resolve;request.reject=reject;const existingRequest=this.requestQueue.find(r=> r.action===request.action && r.type===request.type && JSON.stringify(r.data)===JSON.stringify(request.data));if(existingRequest){console.log('LAS: Deduplicating request:',request.type);const originalResolve=existingRequest.resolve;const originalReject=existingRequest.reject;existingRequest.resolve=(result)=>{originalResolve(result);resolve(result);};existingRequest.reject=(error)=>{originalReject(error);reject(error);};return;}if(request.priority==='high'){this.requestQueue.unshift(request);}else{this.requestQueue.push(request);}this.logRequest(request,'queued');this.processQueue();});}async processQueue(){if(this.isProcessing || this.requestQueue.length===0 || this.pauseProcessing){return;}if(!navigator.onLine){console.log('LAS: Offline,delaying request processing');return;}this.isProcessing=true;try{while(this.requestQueue.length > 0 && !this.pauseProcessing){const request=this.requestQueue.shift();try{console.log(`LAS: Processing request: ${request.type}(${request.id})`);const result=await this.executeRequest(request);request.resolve(result);this.retryAttempts.delete(request.id);this.logRequest(request,'success',result);}catch(error){console.error(`LAS: Request failed: ${request.type}(${request.id})`,error);await this.handleRequestError(request,error);}await this.delay(100);}}finally{this.isProcessing=false;}if(this.requestQueue.length > 0 && !this.pauseProcessing){setTimeout(()=> this.processQueue(),1000);}}async executeRequest(request){const errorHandler=this.core.get('error');if(errorHandler){errorHandler.showLoading(true,this.getLoadingMessage(request.type));}const abortController=new AbortController();this.abortControllers.set(request.id,abortController);try{const formData=new FormData();formData.append('action',request.action);formData.append('nonce',request.nonce);if(request.data && Object.keys(request.data).length > 0){if(request.type==='save_settings' || request.type==='import_settings'){formData.append('settings',JSON.stringify(request.data));}else{Object.keys(request.data).forEach(key=>{formData.append(key,request.data[key]);});}}const response=await fetch(this.core.config.ajax_url,{method: 'POST',body: formData,credentials: 'same-origin',signal: abortController.signal});if(abortController.signal.aborted){throw new Error('Request was aborted');}if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const result=await response.json();if(result.success===false){throw new Error(result.data || 'Unknown server error');}if(errorHandler && this.shouldShowSuccessMessage(request.type)){errorHandler.showSuccess(this.getSuccessMessage(request.type));}return result.data || result;}finally{if(errorHandler){errorHandler.showLoading(false);}this.abortControllers.delete(request.id);}}async handleRequestError(request,error){const retryCount=this.retryAttempts.get(request.id)|| 0;const errorHandler=this.core.get('error');this.logRequest(request,'error',error);if(retryCount < this.maxRetries && this.shouldRetry(error)){const delay=this.baseDelay*Math.pow(2,retryCount);this.retryAttempts.set(request.id,retryCount+1);console.log(`LAS: Retrying request ${request.id}in ${delay}ms(attempt ${retryCount+1}/${this.maxRetries})`);if(errorHandler){errorHandler.showWarning(`Request failed,retrying in ${Math.ceil(delay/1000)}s...(${retryCount+1}/${this.maxRetries})`);}setTimeout(()=>{this.requestQueue.unshift(request);this.processQueue();},delay);}else{this.retryAttempts.delete(request.id);if(errorHandler){const errorMessage=this.getErrorMessage(request.type,error);errorHandler.showError(errorMessage,{details: error.message,actions: this.getErrorActions(request,error)});}request.reject(error);}}shouldRetry(error){const nonRetryableErrors=[ 'Security check failed','Insufficient permissions','Invalid nonce','Request was aborted' ];return !nonRetryableErrors.some(msg=> error.message.includes(msg));}getLoadingMessage(requestType){const messages={'save_settings': 'Saving settings...','load_settings': 'Loading settings...','reset_settings': 'Resetting settings...','export_settings': 'Exporting settings...','import_settings': 'Importing settings...'};return messages[requestType] || 'Processing...';}getSuccessMessage(requestType){const messages={'save_settings': 'Settings saved successfully','reset_settings': 'Settings reset successfully','import_settings': 'Settings imported successfully'};return messages[requestType] || 'Operation completed successfully';}getErrorMessage(requestType,error){const messages={'save_settings': 'Failed to save settings','load_settings': 'Failed to load settings','reset_settings': 'Failed to reset settings','export_settings': 'Failed to export settings','import_settings': 'Failed to import settings'};return messages[requestType] || 'Operation failed';}shouldShowSuccessMessage(requestType){const backgroundTypes=['load_settings'];return !backgroundTypes.includes(requestType);}getErrorActions(request,error){const actions=[];if(this.shouldRetry(error)){actions.push({id: 'retry',text: 'Retry',callback:()=>{this.retryAttempts.delete(request.id);this.queueRequest(request);}});}if(request.type==='load_settings'){actions.push({id: 'refresh',text: 'Refresh Page',callback:()=>{window.location.reload();}});}return actions;}logRequest(request,status,result=null){const logEntry={id: request.id,type: request.type,action: request.action,status: status,timestamp: Date.now(),duration: status==='success' || status==='error' ? Date.now()-request.timestamp : null,error: status==='error' ? result : null,retryCount: this.retryAttempts.get(request.id)|| 0};this.requestHistory.push(logEntry);if(this.requestHistory.length > this.maxHistorySize){this.requestHistory.shift();}if(this.core.config.debug){console.log('LAS AJAX Log:',logEntry);}}generateRequestId(){return `req_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;}delay(ms){return new Promise(resolve=> setTimeout(resolve,ms));}abortAllRequests(){console.log('LAS: Aborting all pending requests');for(const [requestId,controller] of this.abortControllers){controller.abort();}this.abortControllers.clear();this.requestQueue.forEach(request=>{request.reject(new Error('Request was aborted'));});this.requestQueue=[];this.isProcessing=false;this.retryAttempts.clear();}getStats(){const now=Date.now();const recentRequests=this.requestHistory.filter(r=> now-r.timestamp < 60000);return{totalRequests: this.requestHistory.length,recentRequests: recentRequests.length,queuedRequests: this.requestQueue.length,activeRequests: this.abortControllers.size,successRate: this.requestHistory.length > 0 ?(this.requestHistory.filter(r=> r.status==='success').length/this.requestHistory.length)*100 : 0,averageResponseTime: this.requestHistory .filter(r=> r.duration).reduce((sum,r,_,arr)=> sum+r.duration/arr.length,0)};}cleanup(){console.log('LAS: Cleaning up AJAX Manager...');try{this.abortAllRequests();this.requestHistory=[];this.pauseProcessing=false;console.log('LAS: AJAX Manager cleanup complete');}catch(error){console.error('LAS: Error during AJAX Manager cleanup:',error);}}}class LASSettingsManager{constructor(core){this.core=core;this.settings={};this.debounceTimers=new Map();this.localStorage=window.localStorage;this.broadcastChannel=null;this.validator=null;this.storageKey='las_settings_backup';this.syncKey='las_settings_sync';this.debounceDelay=300;this.init=this.init.bind(this);this.set=this.set.bind(this);this.get=this.get.bind(this);this.getAll=this.getAll.bind(this);this.reset=this.reset.bind(this);this.debouncedSave=this.debouncedSave.bind(this);this.saveToLocalStorage=this.saveToLocalStorage.bind(this);this.loadFromLocalStorage=this.loadFromLocalStorage.bind(this);this.broadcastChange=this.broadcastChange.bind(this);this.handleBroadcastMessage=this.handleBroadcastMessage.bind(this);}async init(){try{console.log('LAS: Initializing Settings Manager...');this.validator=new LASSettingsValidator();this.initBroadcastChannel();await this.loadSettings();this.setupStorageListener();this.setupPeriodicSync();console.log('LAS: Settings Manager initialized successfully');}catch(error){console.error('LAS: Failed to initialize Settings Manager:',error);this.loadFromLocalStorage();throw error;}}initBroadcastChannel(){if('BroadcastChannel' in window){try{this.broadcastChannel=new BroadcastChannel(this.syncKey);this.broadcastChannel.onmessage=this.handleBroadcastMessage;console.log('LAS: BroadcastChannel initialized for multi-tab sync');}catch(error){console.warn('LAS: Failed to initialize BroadcastChannel:',error);this.broadcastChannel=null;}}else{console.warn('LAS: BroadcastChannel not supported,using localStorage fallback');}}handleBroadcastMessage(event){try{const{type,key,value,timestamp}=event.data;if(type==='setting_changed'){this.settings[key]=value;const previewEngine=this.core.get('preview');if(previewEngine && typeof previewEngine.updateSetting==='function'){previewEngine.updateSetting(key,value);}this.core.emit('settings:synced',{key,value,timestamp});console.log(`LAS: Setting '${key}' synced from another tab`);}}catch(error){console.error('LAS: Error handling broadcast message:',error);}}setupStorageListener(){window.addEventListener('storage',(e)=>{if(e.key===this.syncKey && e.newValue){try{const data=JSON.parse(e.newValue);this.handleBroadcastMessage({data});}catch(error){console.error('LAS: Error parsing storage sync data:',error);}}});}setupPeriodicSync(){setInterval(()=>{if(this.debounceTimers.size > 0){console.log('LAS: Periodic sync-forcing save of pending changes');this.forceSaveAll();}},30000);}set(key,value,options={}){const{skipPreview=false,skipSave=false,skipValidation=false,skipBroadcast=false}=options;try{if(!skipValidation && this.validator){value=this.validator.validateAndSanitize(key,value);}const previousValue=this.settings[key];this.settings[key]=value;if(!skipPreview){const previewEngine=this.core.get('preview');if(previewEngine && typeof previewEngine.updateSetting==='function'){previewEngine.updateSetting(key,value);}}if(!skipSave){this.debouncedSave(key,value);}if(!skipBroadcast){this.broadcastChange(key,value);}this.saveToLocalStorage();this.core.emit('settings:changed',{key,value,previousValue,timestamp: Date.now()});console.log(`LAS: Setting '${key}' updated:`,value);}catch(error){console.error(`LAS: Error setting '${key}':`,error);this.core.get('error')?.showError(`Failed to update setting '${key}': ${error.message}`);}}get(key,defaultValue=null){return this.settings.hasOwnProperty(key)? this.settings[key] : defaultValue;}getAll(){return{...this.settings};}reset(key){const defaultValue=this.getDefaultValue(key);this.set(key,defaultValue);}resetAll(){const defaultSettings=this.getDefaultSettings();for(const [key,value] of Object.entries(defaultSettings)){this.set(key,value,{skipBroadcast: true});}this.broadcastChange('__reset__',true);this.core.emit('settings:reset',{timestamp: Date.now()});}debouncedSave(key,value){const timerId=`save_${key}`;if(this.debounceTimers.has(timerId)){clearTimeout(this.debounceTimers.get(timerId));}const timer=setTimeout(async()=>{try{const ajaxManager=this.core.get('ajax');if(ajaxManager && typeof ajaxManager.saveSettings==='function'){await ajaxManager.saveSettings({[key]: value});console.log(`LAS: Setting '${key}' saved to server`);}else{console.warn('LAS: AJAX manager not available,settings not saved to server');}}catch(error){console.error(`LAS: Failed to save setting '${key}' to server:`,error);this.core.get('error')?.showError(`Failed to save setting '${key}': ${error.message}`);}finally{this.debounceTimers.delete(timerId);}},this.debounceDelay);this.debounceTimers.set(timerId,timer);}forceSaveAll(){const pendingKeys=Array.from(this.debounceTimers.keys());for(const [timerId,timer] of this.debounceTimers){clearTimeout(timer);}this.debounceTimers.clear();if(pendingKeys.length > 0){const settingsToSave={};pendingKeys.forEach(timerId=>{const key=timerId.replace('save_','');settingsToSave[key]=this.settings[key];});const ajaxManager=this.core.get('ajax');if(ajaxManager && typeof ajaxManager.saveSettings==='function'){ajaxManager.saveSettings(settingsToSave).catch(error=>{console.error('LAS: Failed to force save settings:',error);});}}}broadcastChange(key,value){const message={type: 'setting_changed',key,value,timestamp: Date.now()};if(this.broadcastChannel){try{this.broadcastChannel.postMessage(message);}catch(error){console.error('LAS: Failed to broadcast via BroadcastChannel:',error);this.fallbackBroadcast(message);}}else{this.fallbackBroadcast(message);}}fallbackBroadcast(message){try{localStorage.setItem(this.syncKey,JSON.stringify(message));localStorage.removeItem(this.syncKey);}catch(error){console.error('LAS: Failed to broadcast via localStorage:',error);}}saveToLocalStorage(){try{const backup={settings: this.settings,timestamp: Date.now(),version: '1.0'};localStorage.setItem(this.storageKey,JSON.stringify(backup));}catch(error){console.error('LAS: Failed to save to localStorage:',error);}}loadFromLocalStorage(){try{const backup=localStorage.getItem(this.storageKey);if(backup){const data=JSON.parse(backup);if(data.settings && typeof data.settings==='object'){this.settings={...this.getDefaultSettings(),...data.settings};console.log('LAS: Settings loaded from localStorage backup');return true;}}}catch(error){console.error('LAS: Failed to load from localStorage:',error);}this.settings=this.getDefaultSettings();return false;}async loadSettings(){try{const ajaxManager=this.core.get('ajax');if(ajaxManager && typeof ajaxManager.loadSettings==='function'){const serverSettings=await ajaxManager.loadSettings();this.settings={...this.getDefaultSettings(),...serverSettings};console.log('LAS: Settings loaded from server');}else{console.warn('LAS: AJAX manager not available,loading from localStorage');this.loadFromLocalStorage();}}catch(error){console.error('LAS: Failed to load settings from server:',error);if(!this.loadFromLocalStorage()){console.warn('LAS: Using default settings');}}}getDefaultSettings(){return{menu_background_color: '#23282d',menu_text_color: '#ffffff',menu_hover_color: '#0073aa',menu_active_color: '#ffffff',adminbar_background: '#23282d',adminbar_text_color: '#ffffff',content_background: '#f1f1f1',content_text_color: '#23282d',enable_live_preview: true,animation_speed: 'normal',auto_save: true,debug_mode: false};}getDefaultValue(key){const defaults=this.getDefaultSettings();return defaults[key] || null;}cleanup(){console.log('LAS: Cleaning up Settings Manager...');try{this.forceSaveAll();if(this.broadcastChannel){this.broadcastChannel.close();this.broadcastChannel=null;}for(const timer of this.debounceTimers.values()){clearTimeout(timer);}this.debounceTimers.clear();this.saveToLocalStorage();this.settings={};console.log('LAS: Settings Manager cleanup complete');}catch(error){console.error('LAS: Error during Settings Manager cleanup:',error);}}}class LASSettingsValidator{constructor(){this.validationRules=this.getValidationRules();this.sanitizationRules=this.getSanitizationRules();}validateAndSanitize(key,value){try{const sanitized=this.sanitize(key,value);const validated=this.validate(key,sanitized);return validated;}catch(error){console.error(`LAS: Validation failed for '${key}':`,error);return this.getDefaultValue(key);}}sanitize(key,value){const type=this.getSettingType(key);const sanitizer=this.sanitizationRules[type];if(sanitizer && typeof sanitizer==='function'){return sanitizer(value);}return this.sanitizeString(value);}validate(key,value){const type=this.getSettingType(key);const validator=this.validationRules[type];if(validator && typeof validator==='function'){if(!validator(value)){throw new Error(`Invalid value for setting type '${type}'`);}}return value;}getSettingType(key){if(key.includes('_color')|| key.includes('_colour')){return 'color';}if(key.startsWith('enable_')|| key.startsWith('disable_')|| key.includes('_enabled')|| key.includes('_disabled')|| ['auto_save','debug_mode'].includes(key)){return 'boolean';}if(key.includes('_size')|| key.includes('_width')|| key.includes('_height')|| key.includes('_delay')|| key.includes('_timeout')){return 'number';}if(key.includes('_url')|| key.includes('_link')){return 'url';}if(key.includes('_css')|| key.includes('_style')){return 'css';}if(key.includes('_email')|| key.includes('_mail')){return 'email';}return 'string';}getValidationRules(){return{color:(value)=>{if(typeof value !=='string')return false;if(/^#([A-Fa-f0-9]{6})$/.test(value))return true;if(/^rgba?\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*(,\s*[\d.]+)?\s*\)$/.test(value))return true;const namedColors=['transparent','inherit','initial','unset','black','white','red','green','blue'];return namedColors.includes(value.toLowerCase());},boolean:(value)=>{return typeof value==='boolean' || value==='true' || value==='false' || value===1 || value===0;},number:(value)=>{const num=parseFloat(value);return !isNaN(num)&& isFinite(num);},url:(value)=>{if(typeof value !=='string')return false;try{new URL(value);return true;}catch{return/^\/[^\/]/.test(value)||/^[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\./.test(value);}},email:(value)=>{if(typeof value !=='string')return false;return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);},css:(value)=>{if(typeof value !=='string')return false;const dangerousPatterns=[/javascript\s*:/i,/expression\s*\(/i,/@import/i,/behavior\s*:/i,/-moz-binding/i,/vbscript\s*:/i ];return !dangerousPatterns.some(pattern=> pattern.test(value));},string:(value)=>{return typeof value==='string' && value.length <=10000;}};}getSanitizationRules(){return{color:(value)=>{if(typeof value !=='string')return '#000000';value=value.trim();if(/^#([A-Fa-f0-9]{3})$/.test(value)){const hex=value.slice(1);return '#'+hex.split('').map(c=> c+c).join('');}return value;},boolean:(value)=>{if(typeof value==='boolean')return value;if(typeof value==='string'){return value.toLowerCase()==='true' || value==='1';}if(typeof value==='number'){return value !==0;}return false;},number:(value)=>{const num=parseFloat(value);return isNaN(num)? 0 : num;},url:(value)=>{if(typeof value !=='string')return '';return value.trim();},email:(value)=>{if(typeof value !=='string')return '';return value.trim().toLowerCase();},css:(value)=>{if(typeof value !=='string')return '';const dangerousPatterns=[/javascript\s*:/gi,/expression\s*\(/gi,/@import/gi,/behavior\s*:/gi,/-moz-binding/gi,/vbscript\s*:/gi ];let sanitized=value;dangerousPatterns.forEach(pattern=>{sanitized=sanitized.replace(pattern,'');});return sanitized.trim();},string:(value)=>{if(typeof value !=='string')return String(value || '');return value .replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#x27;').replace(/\ .trim().slice(0,10000);}};}sanitizeString(value){return this.sanitizationRules.string(value);}getDefaultValue(key){const type=this.getSettingType(key);const defaults={color: '#000000',boolean: false,number: 0,url: '',email: '',css: '',string: ''};return defaults[type] || '';}}window.LAS.CoreManager=LASCoreManager;window.LAS.ErrorHandler=LASErrorHandler;window.LAS.SettingsManager=LASSettingsManager;window.LAS.SettingsValidator=LASSettingsValidator;if(typeof jQuery !=='undefined' && typeof jQuery.fn !=='undefined'){jQuery(document).ready(function($){"use strict";if(typeof lasAdminData==='undefined'){console.error('LAS: lasAdminData not available-initialization aborted');return;}console.log('LAS: Starting initialization with Core Manager...');console.log('LAS: Available configuration:',lasAdminData);window.LAS.coreManager=new LASCoreManager();window.LAS.coreManager.init().then(()=>{console.log('LAS: Core Manager initialization successful');window.LAS.coreManager.on('core:ready',(data)=>{console.log('LAS: System ready with modules:',data.modules);});window.LAS.coreManager.on('core:error',(data)=>{console.error('LAS: Core error occurred:',data);});initializeLegacyCompatibility();}).then(()=>{console.log('LAS: Initialization complete');}).catch((error)=>{console.error('LAS: Core Manager initialization failed:',error);console.log('LAS: Falling back to legacy initialization...');initializeLegacyFallback();});function initializeLegacyCompatibility(){window.LAS.legacy={StateManager: createLegacyStateManager(),ErrorManager: window.LAS.coreManager.get('error')};}function createLegacyStateManager(){return{activeTab: null,init: function(){console.log('LAS: Legacy State Manager initialized');this.initializeTabs();},initializeTabs: function(){const settingsManager=window.LAS.coreManager.get('settings');if(settingsManager){return;}this.initializeFallbackTabs();},initializeFallbackTabs: function(){console.log('LAS: Initializing fallback tab system');if(typeof $ !=='function'){console.warn('LAS: jQuery not available for fallback tabs');return;}try{$('#las-settings-tabs .las-tab-panel').hide();$('#las-settings-tabs .las-tab-panel:first').show();$('#las-settings-tabs ul li a').on('click.las-fallback-tabs',function(e){e.preventDefault();const $this=$(this);const targetId=$this.attr('href');const tabId=targetId.replace('#las-tab-','');$('#las-settings-tabs ul li').removeClass('ui-tabs-active ui-state-active');$this.parent().addClass('ui-tabs-active ui-state-active');$('#las-settings-tabs .las-tab-panel').hide();$(targetId).show();this.saveTabState(tabId);}.bind(this));}catch(error){console.error('LAS: Error in fallback tab initialization:',error);}},saveTabState: function(tabId){this.activeTab=tabId;localStorage.setItem('las_active_tab',tabId);},activateTab: function(tabId){if(typeof $ !=='function'){console.warn('LAS: jQuery not available for tab activation');return;}try{const $targetLink=$('#las-settings-tabs ul li a[href="#las-tab-'+tabId+'"]');if($targetLink.length){$targetLink.trigger('click.las-fallback-tabs');}}catch(error){console.error('LAS: Error activating tab:',error);}}};}function initializeLegacyFallback(){console.log('LAS: Initializing legacy fallback...');window.LAS.errorHandler={showError: function(message){console.error('LAS Error:',message);alert('LAS Error: '+message);},showSuccess: function(message){console.log('LAS Success:',message);},showWarning: function(message){console.warn('LAS Warning:',message);}};const legacyStateManager=createLegacyStateManager();legacyStateManager.init();console.log('LAS: Legacy fallback initialization complete');}var StateManager={activeTab: null,debounceTimer: null,userPreferences:{},init: function(){console.log('LAS StateManager: Initializing...');this.initializeTabs();this.loadUserPreferences();this.restoreTabState();console.log('LAS: Enhanced State Manager initialized');},initializeTabs: function(){var self=this;if(ModernUIManager.navigationManager){try{console.log('LAS: Using modern NavigationManager for tabs...');ModernUIManager.navigationManager.configure({container: '.las-tabs-container',tabSelector: '.las-tab',panelSelector: '.las-tab-panel',activeClass: 'active'});document.addEventListener('las-tab-change',function(e){self.saveTabState(e.detail.tabId);console.log('LAS: Tab changed to:',e.detail.tabId);});console.log('LAS: Modern NavigationManager configured successfully');return;}catch(error){console.error('LAS: Error configuring NavigationManager:',error);}}if(typeof $.fn.tabs==="function" && lasAdminData.jquery_ui && lasAdminData.jquery_ui.tabs){try{$("#las-settings-tabs").tabs({activate: function(event,ui){var tabId=ui.newPanel.attr('id').replace('las-tab-','');self.saveTabState(tabId);},create: function(event,ui){console.log('LAS: jQuery UI Tabs initialized successfully');}});}catch(error){console.error('LAS: Error initializing jQuery UI Tabs:',error);this.initializeFallbackTabs();}}else{console.warn('LAS: jQuery UI Tabs not available,using fallback implementation');this.initializeFallbackTabs();}},initializeFallbackTabs: function(){var self=this;console.log('LAS: Initializing fallback tab system');$('#las-settings-tabs .las-tab-panel').hide();$('#las-settings-tabs .las-tab-panel:first').show();$('#las-settings-tabs ul li a').on('click.las-fallback-tabs',function(e){e.preventDefault();var $this=$(this);var targetId=$this.attr('href');var tabId=targetId.replace('#las-tab-','');$('#las-settings-tabs ul li').removeClass('ui-tabs-active ui-state-active');$this.parent().addClass('ui-tabs-active ui-state-active');$('#las-settings-tabs .las-tab-panel').hide();$(targetId).show();self.saveTabState(tabId);});var initialTab=lasAdminData.current_tab || 'general';this.activateFallbackTab(initialTab);},activateFallbackTab: function(tabId){var $targetLink=$('#las-settings-tabs ul li a[href="#las-tab-'+tabId+'"]');if($targetLink.length){$targetLink.trigger('click.las-fallback-tabs');}},loadUserPreferences: function(){this.userPreferences={ui_theme: 'modern',animation_speed: 'normal',remember_tab_state: true,live_preview_enabled: true};},saveTabState: function(tabId){this.activeTab=tabId;localStorage.setItem('las_active_tab',tabId);if(history.replaceState){var newUrl=window.location.pathname+window.location.search+'#tab-'+tabId;history.replaceState(null,null,newUrl);}},restoreTabState: function(){var savedTab=null;var hash=window.location.hash;if(hash && hash.indexOf('#tab-')===0){savedTab=hash.replace('#tab-','');}if(!savedTab && this.userPreferences.remember_tab_state){savedTab=localStorage.getItem('las_active_tab');}if(!savedTab){savedTab='general';}this.activateTab(savedTab);},activateTab: function(tabId){if(this.navigationManager && typeof this.navigationManager.goToTab==='function'){try{this.navigationManager.goToTab(tabId);this.activeTab=tabId;return;}catch(error){console.error('LAS: Error activating tab with NavigationManager:',error);}}if(typeof $.fn.tabs==="function" && lasAdminData.jquery_ui && lasAdminData.jquery_ui.tabs){try{var tabIndex=this.getTabIndex(tabId);if(tabIndex !==-1){$("#las-settings-tabs").tabs("option","active",tabIndex);this.activeTab=tabId;}}catch(error){console.error('LAS: Error activating jQuery UI tab:',error);this.activateFallbackTab(tabId);}}else{this.activateFallbackTab(tabId);this.activeTab=tabId;}},getTabIndex: function(tabId){var tabIds=['general','menu','adminbar','content','logos','advanced'];return tabIds.indexOf(tabId);},cleanup: function(){console.log('LAS StateManager: Cleaning up...');if(this.debounceTimer){clearTimeout(this.debounceTimer);this.debounceTimer=null;}if(this.navigationManager && typeof this.navigationManager.destroy==='function'){this.navigationManager.destroy();this.navigationManager=null;}$('#las-settings-tabs ul li a').off('.las-fallback-tabs');console.log('LAS StateManager: Cleanup complete');}};var ErrorManager={notifications: [],container: null,isOnline: navigator.onLine,offlineQueue: [],maxNotifications: 5,defaultDuration: 5000,retryAttempts:{},init: function(){this.createContainer();this.setupOnlineOfflineDetection();this.setupGlobalErrorHandling();this.setupKeyboardShortcuts();this.debugMode=localStorage.getItem('las_debug_mode')==='true';if(this.debugMode){console.log('LAS Debug Mode: Enabled from localStorage');}this.startPerformanceMonitoring();$(window).on('load.las-error-manager',function(){setTimeout(function(){this.logPerformanceMetrics();}.bind(this),1000);}.bind(this));console.log('LAS: Enhanced Error Manager initialized');},createContainer: function(){if(!this.container){this.container=$('<div id="las-notifications" class="las-notifications-container" role="alert" aria-live="polite"></div>');$('body').append(this.container);this.injectNotificationStyles();}},injectNotificationStyles: function(){if($('#las-notification-styles').length===0){var styles=` <style id="las-notification-styles"> .las-notifications-container{position: fixed;top: 32px;right: 20px;z-index: 999999;max-width: 400px;pointer-events: none;}.las-notification{background: #fff;border-left: 4px solid #0073aa;box-shadow: 0 2px 8px rgba(0,0,0,0.1);margin-bottom: 10px;padding: 12px 16px;border-radius: 4px;pointer-events: auto;opacity: 0;transform: translateX(100%);transition: all 0.3s ease;position: relative;word-wrap: break-word;}.las-notification.show{opacity: 1;transform: translateX(0);}.las-notification.error{border-left-color: #dc3232;}.las-notification.warning{border-left-color: #ffb900;}.las-notification.success{border-left-color: #46b450;}.las-notification.info{border-left-color: #00a0d2;}.las-notification.offline{border-left-color: #666;background: #f1f1f1;}.las-notification-header{display: flex;justify-content: space-between;align-items: flex-start;margin-bottom: 4px;}.las-notification-title{font-weight: 600;font-size: 14px;margin: 0;color: #23282d;}.las-notification-close{background: none;border: none;font-size: 18px;cursor: pointer;color: #666;padding: 0;margin-left: 10px;line-height: 1;}.las-notification-close:hover{color: #000;}.las-notification-message{font-size: 13px;color: #555;margin: 0;line-height: 1.4;}.las-notification-actions{margin-top: 8px;display: flex;gap: 8px;}.las-notification-action{background: #0073aa;color: #fff;border: none;padding: 4px 8px;border-radius: 3px;font-size: 12px;cursor: pointer;text-decoration: none;display: inline-block;}.las-notification-action:hover{background: #005a87;color: #fff;}.las-notification-action.secondary{background: #f1f1f1;color: #555;}.las-notification-action.secondary:hover{background: #e1e1e1;color: #000;}.las-notification-progress{position: absolute;bottom: 0;left: 0;height: 2px;background: rgba(0,115,170,0.3);transition: width linear;}.las-notification-progress-container{margin-top: 8px;padding: 8px 0;}.las-notification-progress-text{font-size: 12px;color: #666;margin-bottom: 4px;}.las-notification-progress-bar{height: 4px;background: #e1e5e9;border-radius: 2px;overflow: hidden;position: relative;}.las-notification-progress-bar::after{content: '';position: absolute;top: 0;left: 0;height: 100%;width: 0%;background: linear-gradient(90deg,#007cba 0%,#005a87 100%);border-radius: 2px;transition: width 0.3s ease;}.las-notification-checkmark{position: absolute;top: 8px;left: 8px;width: 20px;height: 20px;background: #46b450;color: white;border-radius: 50%;display: flex;align-items: center;justify-content: center;font-size: 12px;font-weight: bold;animation: checkmarkBounce 0.6s ease-out;}@keyframes checkmarkBounce{0%{transform: scale(0);opacity: 0;}50%{transform: scale(1.2);opacity: 1;}100%{transform: scale(1);opacity: 1;}}.las-notification.success.has-checkmark{padding-left: 40px;}.las-offline-indicator{position: fixed;top: 32px;left: 50%;transform: translateX(-50%);background: #dc3232;color: #fff;padding: 8px 16px;border-radius: 4px;font-size: 13px;z-index: 1000000;box-shadow: 0 2px 8px rgba(0,0,0,0.2);}@media(max-width: 782px){.las-notifications-container{top: 46px;right: 10px;left: 10px;max-width: none;}}</style> `;$('head').append(styles);}},setupOnlineOfflineDetection: function(){var self=this;$(window).on('online.las-error-manager',function(){self.isOnline=true;self.hideOfflineIndicator();self.processOfflineQueue();self.showSuccess('Connection restored',{duration: 3000,actions: [{text: 'Retry Failed Actions',action: function(){self.retryFailedActions();}}]});});$(window).on('offline.las-error-manager',function(){self.isOnline=false;self.showOfflineIndicator();self.showWarning('Connection lost-working offline',{duration: 0,persistent: true});});if(!this.isOnline){this.showOfflineIndicator();}},setupGlobalErrorHandling: function(){var self=this;window.addEventListener('error',function(event){self.handleGlobalError({message: event.message,source: event.filename,line: event.lineno,column: event.colno,error: event.error,type: 'javascript'});});window.addEventListener('unhandledrejection',function(event){self.handleGlobalError({message: event.reason ? event.reason.toString(): 'Unhandled promise rejection',source: 'promise',type: 'promise',error: event.reason});});$(document).ajaxError(function(event,jqXHR,ajaxSettings,thrownError){if(ajaxSettings.url===lasAdminData.ajax_url && ajaxSettings.data && typeof ajaxSettings.data==='object' && ajaxSettings.data.action && ajaxSettings.data.action.indexOf('las_')===0){self.handleAjaxError(jqXHR,ajaxSettings,thrownError);}});},setupKeyboardShortcuts: function(){var self=this;$(document).on('keydown.las-error-manager',function(e){if(e.keyCode===27){self.dismissAll();}if(e.ctrlKey && e.shiftKey && e.keyCode===68){e.preventDefault();if(self.isDebugMode()){self.disableDebugMode();}else{self.enableDebugMode();}}if(e.ctrlKey && e.shiftKey && e.keyCode===73){e.preventDefault();if(self.isDebugMode()){self.showDebugInfo();}else{self.showWarning('Debug mode is not enabled. Press Ctrl+Shift+D to enable it.');}}if(e.ctrlKey && e.shiftKey && e.keyCode===67){e.preventDefault();if(self.isDebugMode()){self.clearErrorLogs();}}if(e.ctrlKey && e.shiftKey && e.keyCode===80){e.preventDefault();var metrics=self.getPerformanceMetrics();if(metrics){console.log('LAS Performance Metrics:',metrics);self.showInfo('Performance metrics logged to console',{details: 'Total time: '+Math.round(metrics.totalTime)+'ms'});}}});},handleGlobalError: function(errorInfo){if(errorInfo.source && !errorInfo.source.includes('live-admin-styler')){return;}console.error('LAS Global Error:',errorInfo);if(this.isOnline){this.reportErrorToServer(errorInfo);}else{this.offlineQueue.push({type: 'error_report',data: errorInfo});}this.showError('An unexpected error occurred',{details: errorInfo.message,actions: [{text: 'Report Issue',action: function(){window.open('https:}}]});},handleAjaxError: function(jqXHR,ajaxSettings,thrownError){var errorInfo={status: jqXHR.status,statusText: jqXHR.statusText,responseText: jqXHR.responseText,action: ajaxSettings.data.action,thrownError: thrownError,type: 'ajax'};console.error('LAS AJAX Error:',errorInfo);if(jqXHR.status===0){if(!this.isOnline){this.showWarning('Request failed-you appear to be offline',{actions: [{text: 'Retry when online',action: function(){this.offlineQueue.push({type: 'ajax_retry',data: ajaxSettings});}.bind(this)}]});}else{this.showError('Network error-please check your connection');}}else if(jqXHR.status===403){this.showError('Permission denied-please refresh the page',{actions: [{text: 'Refresh Page',action: function(){window.location.reload();}}]});}else if(jqXHR.status===500){this.showError('Server error-please try again',{actions: [{text: 'Retry',action: function(){$.post(ajaxSettings.url,ajaxSettings.data);}}]});}else{this.showError('Request failed('+jqXHR.status+')',{details: thrownError || jqXHR.statusText});}if(this.isOnline){this.reportErrorToServer(errorInfo);}},reportErrorToServer: function(errorInfo){if(errorInfo.action==='las_report_client_error'){return;}var reportData={action: 'las_report_client_error',nonce: lasAdminData.nonce,message: errorInfo.message || 'Unknown error',type: errorInfo.type || 'unknown',source: errorInfo.source || 'unknown',line: errorInfo.line || 0,column: errorInfo.column || 0,stack: errorInfo.error && errorInfo.error.stack ? errorInfo.error.stack : '',url: window.location.href,user_agent: navigator.userAgent,timestamp: Date.now(),language: navigator.language || 'unknown',platform: navigator.platform || 'unknown',cookie_enabled: navigator.cookieEnabled,online: navigator.onLine,screen_resolution: screen.width+'x'+screen.height,viewport_size: window.innerWidth+'x'+window.innerHeight,context:{component: 'admin-settings',error_manager_version: '1.2.0',active_tab: StateManager.activeTab || 'unknown',notifications_count: this.notifications.length,is_online: this.isOnline}};fetch(lasAdminData.ajax_url,{method: 'POST',headers:{'Content-Type': 'application/x-www-form-urlencoded',},body: new URLSearchParams(reportData)}).then(function(response){return response.json();}).then(function(data){if(data.success){console.log('LAS: Error reported successfully',data.data);}else{console.warn('LAS: Error reporting failed',data.data);}}).catch(function(error){console.warn('LAS: Failed to report error to server:',error);});},showError: function(message,options){return this.showNotification(message,'error',options);},showWarning: function(message,options){return this.showNotification(message,'warning',options);},showSuccess: function(message,options){return this.showNotification(message,'success',options);},showInfo: function(message,options){return this.showNotification(message,'info',options);},showNotification: function(message,type,options){options=$.extend({title: this.getDefaultTitle(type),duration: this.defaultDuration,actions: [],details: null,persistent: false,id: null,showProgress: false,progressText: null,showCheckmark: false},options ||{});if(!options.id){options.id='las-notification-'+Date.now()+'-'+Math.random().toString(36).substr(2,9);}if(this.notifications.length >=this.maxNotifications){this.dismissOldest();}var notification=this.createNotificationElement(message,type,options);this.notifications.push({id: options.id,element: notification,type: type,persistent: options.persistent,timestamp: Date.now(),showProgress: options.showProgress});this.container.append(notification);setTimeout(function(){notification.addClass('show');},10);if(!options.persistent && options.duration > 0){this.scheduleAutoDismiss(options.id,options.duration);}var logMethod=type==='error' ? 'error' : type==='warning' ? 'warn' : 'log';console[logMethod]('LAS '+type.charAt(0).toUpperCase()+type.slice(1)+':',message);return options.id;},createNotificationElement: function(message,type,options){var notification=$('<div class="las-notification '+type+'" data-id="'+options.id+'"></div>');var header=$('<div class="las-notification-header"></div>');var title=$('<h4 class="las-notification-title">'+options.title+'</h4>');var closeBtn=$('<button class="las-notification-close" aria-label="Dismiss notification">&times;</button>');header.append(title,closeBtn);notification.append(header);var messageEl=$('<p class="las-notification-message">'+message+'</p>');notification.append(messageEl);if(options.details){var detailsEl=$('<p class="las-notification-details" style="font-size: 12px;color: #666;margin-top: 4px;"></p>');detailsEl.text(options.details);notification.append(detailsEl);}if(options.actions && options.actions.length > 0){var actionsEl=$('<div class="las-notification-actions"></div>');options.actions.forEach(function(actionConfig){var actionBtn=$('<button class="las-notification-action"></button>');actionBtn.text(actionConfig.text);if(actionConfig.secondary){actionBtn.addClass('secondary');}actionBtn.on('click',function(){if(typeof actionConfig.action==='function'){actionConfig.action();}if(!actionConfig.keepOpen){this.dismiss(options.id);}}.bind(this));actionsEl.append(actionBtn);}.bind(this));notification.append(actionsEl);}if(options.showProgress){var progressContainer=$('<div class="las-notification-progress-container"></div>');var progressBar=$('<div class="las-notification-progress-bar"></div>');var progressText=$('<div class="las-notification-progress-text">'+(options.progressText || 'Processing...')+'</div>');progressContainer.append(progressText,progressBar);notification.append(progressContainer);setTimeout(function(){progressBar.css('width','100%');},100);}if(options.showCheckmark && type==='success'){var checkmark=$('<div class="las-notification-checkmark">✓</div>');notification.prepend(checkmark);}if(!options.persistent && options.duration > 0){var progressBar=$('<div class="las-notification-progress"></div>');notification.append(progressBar);}closeBtn.on('click',function(){this.dismiss(options.id);}.bind(this));return notification;},getDefaultTitle: function(type){var titles={error: 'Error',warning: 'Warning',success: 'Success',info: 'Information'};return titles[type] || 'Notification';},scheduleAutoDismiss: function(id,duration){var self=this;var notification=this.getNotificationById(id);if(!notification)return;var progressBar=notification.element.find('.las-notification-progress');if(progressBar.length){progressBar.css('width','100%');setTimeout(function(){progressBar.css({'width': '0%','transition-duration':(duration/1000)+'s'});},10);}setTimeout(function(){self.dismiss(id);},duration);},dismiss: function(id){var notification=this.getNotificationById(id);if(!notification)return;notification.element.removeClass('show');setTimeout(function(){notification.element.remove();this.notifications=this.notifications.filter(function(n){return n.id !==id;});}.bind(this),300);},dismissAll: function(){this.notifications.forEach(function(notification){if(!notification.persistent){this.dismiss(notification.id);}}.bind(this));},dismissOldest: function(){var oldest=this.notifications.reduce(function(prev,current){return(prev.timestamp < current.timestamp)? prev : current;});if(oldest && !oldest.persistent){this.dismiss(oldest.id);}},getNotificationById: function(id){return this.notifications.find(function(n){return n.id===id;});},showOfflineIndicator: function(){if($('#las-offline-indicator').length===0){var indicator=$('<div id="las-offline-indicator" class="las-offline-indicator">You are currently offline</div>');$('body').append(indicator);}},hideOfflineIndicator: function(){$('#las-offline-indicator').remove();},processOfflineQueue: function(){while(this.offlineQueue.length > 0){var item=this.offlineQueue.shift();if(item.type==='error_report'){this.reportErrorToServer(item.data);}else if(item.type==='ajax_retry'){$.post(item.data.url,item.data.data);}}},retryFailedActions: function(){this.processOfflineQueue();this.showInfo('Retrying failed actions...',{duration: 3000});},enableDebugMode: function(){this.debugMode=true;localStorage.setItem('las_debug_mode','true');this.showInfo('Debug mode enabled-detailed error information will be shown',{duration: 5000,actions: [{text: 'Disable Debug',action: function(){this.disableDebugMode();}.bind(this)}]});console.log('LAS Debug Mode: Enabled');},disableDebugMode: function(){this.debugMode=false;localStorage.removeItem('las_debug_mode');this.showInfo('Debug mode disabled',{duration: 3000});console.log('LAS Debug Mode: Disabled');},isDebugMode: function(){return this.debugMode || localStorage.getItem('las_debug_mode')==='true';},getDebugInfo: function(){if(!this.isDebugMode()){return null;}return{action: 'las_get_debug_info',nonce: lasAdminData.nonce};},showDebugInfo: function(){if(!this.isDebugMode()){this.showWarning('Debug mode is not enabled');return;}var debugData=this.getDebugInfo();if(!debugData){this.showError('Failed to prepare debug information');return;}var loadingId=this.showInfo('Loading debug information...',{duration: 0,persistent: true});$.post(lasAdminData.ajax_url,debugData).done(function(response){this.dismiss(loadingId);if(response.success && response.data){this.displayDebugModal(response.data);}else{this.showError('Failed to retrieve debug information',{details: response.data ? response.data.message : 'Unknown error'});}}.bind(this)).fail(function(jqXHR,textStatus,errorThrown){this.dismiss(loadingId);this.showError('Network error retrieving debug information',{details: textStatus+': '+errorThrown});}.bind(this));},displayDebugModal: function(debugData){var modal=$('<div id="las-debug-modal" style="position: fixed;top: 0;left: 0;width: 100%;height: 100%;background: rgba(0,0,0,0.8);z-index: 999999;display: flex;align-items: center;justify-content: center;"></div>');var content=$('<div style="background: #fff;padding: 20px;border-radius: 8px;max-width: 90%;max-height: 90%;overflow: auto;position: relative;"></div>');var header=$('<div style="display: flex;justify-content: space-between;align-items: center;margin-bottom: 20px;border-bottom: 1px solid #ddd;padding-bottom: 10px;"></div>');header.append('<h2 style="margin: 0;">Live Admin Styler Debug Information</h2>');var closeBtn=$('<button style="background: none;border: none;font-size: 24px;cursor: pointer;padding: 0;">&times;</button>');closeBtn.on('click',function(){modal.remove();});header.append(closeBtn);content.append(header);var sections=[{title: 'System Information',data: debugData.system_info},{title: 'Plugin Information',data: debugData.plugin_info},{title: 'Performance Information',data: debugData.performance_info},{title: 'Recent Errors',data: debugData.recent_errors},{title: 'Error Statistics',data: debugData.error_statistics},{title: 'Performance Metrics',data: debugData.performance_metrics},{title: 'Configuration',data: debugData.configuration},{title: 'Active Plugins',data: debugData.active_plugins},{title: 'Theme Information',data: debugData.theme_info}];sections.forEach(function(section){if(section.data){var sectionDiv=$('<div style="margin-bottom: 20px;"></div>');sectionDiv.append('<h3 style="margin: 0 0 10px 0;color: #333;">'+section.title+'</h3>');var pre=$('<pre style="background: #f5f5f5;padding: 10px;border-radius: 4px;overflow: auto;font-size: 12px;line-height: 1.4;"></pre>');pre.text(JSON.stringify(section.data,null,2));sectionDiv.append(pre);content.append(sectionDiv);}});var copyBtn=$('<button style="background: #0073aa;color: #fff;border: none;padding: 8px 16px;border-radius: 4px;cursor: pointer;margin-top: 10px;">Copy Debug Info</button>');copyBtn.on('click',function(){var debugText=JSON.stringify(debugData,null,2);if(navigator.clipboard){navigator.clipboard.writeText(debugText).then(function(){this.showSuccess('Debug information copied to clipboard');}.bind(this));}else{var textArea=$('<textarea style="position: absolute;left:-9999px;"></textarea>');textArea.val(debugText);$('body').append(textArea);textArea[0].select();document.execCommand('copy');textArea.remove();this.showSuccess('Debug information copied to clipboard');}}.bind(this));content.append(copyBtn);modal.append(content);$('body').append(modal);$(document).on('keydown.las-debug-modal',function(e){if(e.keyCode===27){modal.remove();$(document).off('keydown.las-debug-modal');}});},clearErrorLogs: function(){if(!confirm('Are you sure you want to clear all error logs? This action cannot be undone.')){return;}var clearData={action: 'las_clear_error_logs',nonce: lasAdminData.nonce};var loadingId=this.showInfo('Clearing error logs...',{duration: 0,persistent: true});$.post(lasAdminData.ajax_url,clearData).done(function(response){this.dismiss(loadingId);if(response.success){this.showSuccess('Error logs cleared successfully',{details: response.data.message});}else{this.showError('Failed to clear error logs',{details: response.data ? response.data.message : 'Unknown error'});}}.bind(this)).fail(function(jqXHR,textStatus,errorThrown){this.dismiss(loadingId);this.showError('Network error clearing error logs',{details: textStatus+': '+errorThrown});}.bind(this));},startPerformanceMonitoring: function(){this.performanceMonitoring={enabled: true,startTime: performance.now(),metrics:{domContentLoaded: 0,windowLoaded: 0,firstPaint: 0,firstContentfulPaint: 0,largestContentfulPaint: 0,cumulativeLayoutShift: 0,firstInputDelay: 0}};if(window.PerformanceObserver){try{new PerformanceObserver(function(list){var entries=list.getEntries();var lastEntry=entries[entries.length-1];this.performanceMonitoring.metrics.largestContentfulPaint=lastEntry.startTime;}.bind(this)).observe({entryTypes: ['largest-contentful-paint']});}catch(e){console.warn('LAS: LCP monitoring not supported');}try{new PerformanceObserver(function(list){var clsValue=0;list.getEntries().forEach(function(entry){if(!entry.hadRecentInput){clsValue+=entry.value;}});this.performanceMonitoring.metrics.cumulativeLayoutShift=clsValue;}.bind(this)).observe({entryTypes: ['layout-shift']});}catch(e){console.warn('LAS: CLS monitoring not supported');}try{new PerformanceObserver(function(list){list.getEntries().forEach(function(entry){this.performanceMonitoring.metrics.firstInputDelay=entry.processingStart-entry.startTime;}.bind(this));}.bind(this)).observe({entryTypes: ['first-input']});}catch(e){console.warn('LAS: FID monitoring not supported');}}if(window.performance && window.performance.getEntriesByType){var paintEntries=window.performance.getEntriesByType('paint');paintEntries.forEach(function(entry){if(entry.name==='first-paint'){this.performanceMonitoring.metrics.firstPaint=entry.startTime;}else if(entry.name==='first-contentful-paint'){this.performanceMonitoring.metrics.firstContentfulPaint=entry.startTime;}}.bind(this));}console.log('LAS Performance Monitoring: Started');},getPerformanceMetrics: function(){if(!this.performanceMonitoring || !this.performanceMonitoring.enabled){return null;}var metrics=Object.assign({},this.performanceMonitoring.metrics);metrics.totalTime=performance.now()-this.performanceMonitoring.startTime;metrics.memoryUsage=window.performance && window.performance.memory ?{usedJSHeapSize: window.performance.memory.usedJSHeapSize,totalJSHeapSize: window.performance.memory.totalJSHeapSize,jsHeapSizeLimit: window.performance.memory.jsHeapSizeLimit}: null;return metrics;},logPerformanceMetrics: function(){var metrics=this.getPerformanceMetrics();if(metrics){console.log('LAS Performance Metrics:',metrics);if(metrics.totalTime > 5000){this.showWarning('Slow page performance detected('+Math.round(metrics.totalTime)+'ms)',{details: 'Consider optimizing your settings or reporting this issue',actions: [{text: 'Show Debug Info',action: function(){this.showDebugInfo();}.bind(this)}]});}}},reportPerformanceIssue: function(data){console.log('LAS: Reporting performance issue',data);$.post(lasAdminData.ajax_url,{action: 'las_report_client_error',nonce: lasAdminData.nonce,message: 'Performance issue reported',type: 'performance',context:{setting: data.setting,value: data.value,execution_time: data.execution_time,memory_usage: data.memory_usage,user_agent: navigator.userAgent,timestamp: Date.now()}}).done(function(response){if(response.success){this.showSuccess('Performance issue reported successfully',{duration: 3000,details: 'Thank you for helping us improve the plugin'});}else{this.showWarning('Failed to report performance issue',{duration: 5000});}}.bind(this));},showOptimizationTips: function(setting){var tips=this.getOptimizationTips(setting);this.showInfo('Optimization Tips',{duration: 10000,details: tips,actions: [{text: 'Apply Suggestions',action: function(){this.applyOptimizationSuggestions(setting);}.bind(this)}]});},getOptimizationTips: function(setting){var tips={'menu_background_color': 'Use solid colors instead of gradients for better performance','menu_shadow': 'Reduce shadow blur radius for faster rendering','menu_border_radius': 'Use smaller border radius values(under 10px)','adminbar_background_color': 'Avoid complex gradients in the admin bar','content_background_image': 'Use optimized images under 500KB','default': 'Consider using simpler styling options for better performance'};return tips[setting] || tips['default'];},applyOptimizationSuggestions: function(setting){this.showInfo('Optimization suggestions applied',{duration: 3000,actions: [{text: 'Undo',action: function(){this.showInfo('Undo functionality coming soon');}.bind(this)}]});},checkConnectionStatus: function(){this.showInfo('Checking connection...',{duration: 0,persistent: true,id: 'connection-check'});$.get(lasAdminData.ajax_url+'?action=las_ping&_='+Date.now()).done(function(){this.dismiss('connection-check');this.showSuccess('Connection is working',{duration: 3000});}.bind(this)).fail(function(){this.dismiss('connection-check');this.showError('Connection test failed',{duration: 5000,details: 'Please check your internet connection'});}.bind(this));},testConnection: function(){this.checkConnectionStatus();},checkLoginStatus: function(){this.showInfo('Checking login status...',{duration: 0,persistent: true,id: 'login-check'});$.post(lasAdminData.ajax_url,{action: 'las_check_login_status',nonce: lasAdminData.nonce}).done(function(response){this.dismiss('login-check');if(response.success){this.showSuccess('Login status is valid',{duration: 3000});}else{this.showWarning('Login session may have expired',{duration: 0,persistent: true,actions: [{text: 'Refresh Page',action: function(){window.location.reload();}}]});}}.bind(this)).fail(function(){this.dismiss('login-check');this.showError('Unable to verify login status',{duration: 5000,actions: [{text: 'Refresh Page',action: function(){window.location.reload();}}]});}.bind(this));},reportTechnicalIssue: function(data){console.log('LAS: Reporting technical issue',data);$.post(lasAdminData.ajax_url,{action: 'las_report_client_error',nonce: lasAdminData.nonce,message: 'Technical issue reported',type: 'technical',context: data}).done(function(response){if(response.success){this.showSuccess('Technical issue reported',{duration: 3000,details: 'Our team will investigate this issue'});}else{this.showWarning('Failed to report technical issue');}}.bind(this));},reportServerError: function(data){console.log('LAS: Reporting server error',data);$.post(lasAdminData.ajax_url,{action: 'las_report_client_error',nonce: lasAdminData.nonce,message: 'Server error reported',type: 'server_error',context: data}).done(function(response){if(response.success){this.showSuccess('Server error reported',{duration: 3000});}}.bind(this));},queueForRetry: function(callback){this.offlineQueue.push({type: 'retry_callback',callback: callback,timestamp: Date.now()});this.showInfo('Action queued for when connection is restored',{duration: 3000});},showValidationHelp: function(setting){var helpText=this.getValidationHelp(setting);this.showInfo('Validation Help: '+setting,{duration: 8000,details: helpText,actions: [{text: 'Show Examples',action: function(){this.showValidationExamples(setting);}.bind(this)}]});},getValidationHelp: function(setting){var help={'menu_background_color': 'Use valid CSS colors: #ffffff,rgb(255,255,255),or color names','menu_width': 'Enter a number between 160 and 400(pixels)','menu_border_radius': 'Enter a number between 0 and 50(pixels)','adminbar_height': 'Enter a number between 28 and 60(pixels)','default': 'Please enter a valid value for this setting'};return help[setting] || help['default'];},showValidationExamples: function(setting){var examples=this.getValidationExamples(setting);this.showInfo('Valid Examples for '+setting,{duration: 10000,details: examples});},getValidationExamples: function(setting){var examples={'menu_background_color': 'Examples: #ffffff,#007cba,rgb(0,124,186),blue','menu_width': 'Examples: 220,280,320(pixels)','menu_border_radius': 'Examples: 0,5,10,15(pixels)','adminbar_height': 'Examples: 32,40,48(pixels)','default': 'Please refer to the field description for valid values'};return examples[setting] || examples['default'];},cleanup: function(){console.log('LAS ErrorManager: Cleaning up...');$(window).off('.las-error-manager');$(document).off('.las-error-manager');this.dismissAll();if(this.container){this.container.remove();this.container=null;}$('#las-notification-styles').remove();if(this.performanceMonitoring){this.performanceMonitoring.enabled=false;}console.log('LAS ErrorManager: Cleanup complete');},getStatus: function(){return{isOnline: this.isOnline,notificationCount: this.notifications.length,offlineQueueLength: this.offlineQueue.length,notifications: this.notifications.map(function(n){return{id: n.id,type: n.type,persistent: n.persistent,timestamp: n.timestamp};})};},destroy: function(){$(window).off('.las-error-manager');$(document).off('.las-error-manager');this.dismissAll();if(this.container){this.container.remove();}$('#las-notification-styles').remove();$('#las-offline-indicator').remove();}};var SecurityManager={nonceRefreshInProgress: false,retryQueue: [],lastRefreshTime: 0,refreshThreshold: 2*60*60*1000,init: function(){this.setupNonceValidation();this.schedulePeriodicRefresh();console.log('LAS: Enhanced Security Manager initialized');},setupNonceValidation: function(){var self=this;var originalPost=$.post;$.post=function(url,data,success,dataType){if(url===lasAdminData.ajax_url && data && typeof data==='object'){if(!data.nonce && data.action && data.action.indexOf('las_')===0){data.nonce=lasAdminData.nonce;}var wrappedSuccess=function(response,textStatus,jqXHR){if(response && !response.success && response.data && response.data.refresh_nonce){console.log('LAS: Nonce validation failed,attempting refresh...');self.handleNonceError(url,data,success,dataType);return;}if(typeof success==='function'){success(response,textStatus,jqXHR);}};return originalPost.call(this,url,data,wrappedSuccess,dataType);}return originalPost.apply(this,arguments);};},handleNonceError: function(url,originalData,originalSuccess,dataType){var self=this;this.retryQueue.push({url: url,data: originalData,success: originalSuccess,dataType: dataType,attempts: 0});if(!this.nonceRefreshInProgress){this.refreshNonce().then(function(){self.processRetryQueue();}).catch(function(error){console.error('LAS: Failed to refresh nonce:',error);self.processRetryQueue();});}},processRetryQueue: function(){var self=this;while(this.retryQueue.length > 0){var request=this.retryQueue.shift();request.attempts++;if(request.attempts >(lasAdminData.retry_attempts || 3)){console.error('LAS: Max retry attempts reached for request:',request.data.action);if(typeof request.success==='function'){request.success({success: false,data:{message: 'Maximum retry attempts exceeded',code: 'max_retries_exceeded'}});}continue;}request.data.nonce=lasAdminData.nonce;setTimeout(function(){$.post(request.url,request.data,request.success,request.dataType);},(lasAdminData.retry_delay || 1000)*request.attempts);}},refreshNonce: function(){var self=this;if(this.nonceRefreshInProgress){return Promise.resolve(lasAdminData.nonce);}this.nonceRefreshInProgress=true;return new Promise(function(resolve,reject){jQuery.post(lasAdminData.ajax_url,{action: 'las_refresh_nonce'}).done(function(response){if(response.success && response.data.nonce){var oldNonce=lasAdminData.nonce;lasAdminData.nonce=response.data.nonce;self.lastRefreshTime=Date.now();console.log('LAS: Security nonce refreshed successfully');$(document).trigger('las:nonce:refreshed',[response.data.nonce,oldNonce]);resolve(response.data.nonce);}else{reject(new Error('Invalid nonce refresh response'));}}).fail(function(jqXHR,textStatus,errorThrown){console.error('LAS: Failed to refresh nonce:',textStatus,errorThrown);reject(new Error('Nonce refresh failed: '+textStatus));}).always(function(){self.nonceRefreshInProgress=false;});});},schedulePeriodicRefresh: function(){var self=this;if(!lasAdminData.auto_refresh_nonce){return;}setInterval(function(){var timeSinceRefresh=Date.now()-self.lastRefreshTime;var threshold=lasAdminData.refresh_threshold || self.refreshThreshold;if(timeSinceRefresh > threshold){console.log('LAS: Periodic nonce refresh triggered');self.refreshNonce().catch(function(error){console.warn('LAS: Periodic nonce refresh failed:',error);});}},5*60*1000);},validateNonce: function(nonce){return nonce && nonce===lasAdminData.nonce;},getCurrentNonce: function(){return lasAdminData.nonce;},isNonceExpired: function(){var timeSinceRefresh=Date.now()-this.lastRefreshTime;var lifetime=lasAdminData.nonce_lifetime ||(12*60*60*1000);return timeSinceRefresh > lifetime;},getSecurityStatus: function(){return{nonce: lasAdminData.nonce,lastRefresh: this.lastRefreshTime,refreshInProgress: this.nonceRefreshInProgress,queueLength: this.retryQueue.length,isExpired: this.isNonceExpired()};},cleanup: function(){console.log('LAS SecurityManager: Cleaning up...');this.retryQueue=[];this.nonceRefreshInProgress=false;this.lastRefreshTime=0;console.log('LAS SecurityManager: Cleanup complete');}};var ModernUIIntegration={init: function(){console.log('LAS: Initializing Modern UI Integration...');this.setupFormEnhancements();this.setupNotificationSystem();this.setupAccessibilityFeatures();this.setupLoadingStates();this.setupThemeToggle();this.setupSearchAndFilters();console.log('LAS: Modern UI Integration complete');},setupFormEnhancements: function(){$('.las-form input,.las-form select,.las-form textarea').each(function(){var $input=$(this);$input.on('focus',function(){$(this).closest('.las-input-group').addClass('focused');}).on('blur',function(){$(this).closest('.las-input-group').removeClass('focused');});$input.on('change',function(){if(ModernUIManager.loadingManager){ModernUIManager.loadingManager.showFieldLoading(this);}});});$('.las-button-primary[type="submit"]').on('click',function(e){var $button=$(this);var $text=$button.find('.las-button-text');var $loading=$button.find('.las-button-loading');if($loading.length){$text.hide();$loading.show();$button.prop('disabled',true);setTimeout(function(){$text.show();$loading.hide();$button.prop('disabled',false);},2000);}});},setupNotificationSystem: function(){$('.notice,.error,.updated').each(function(){var $notice=$(this);var type='info';if($notice.hasClass('error'))type='error';else if($notice.hasClass('updated'))type='success';$notice.addClass('las-notification las-notification-'+type);});$('.las-notification').each(function(){var $notification=$(this);setTimeout(function(){$notification.fadeOut();},5000);});},setupAccessibilityFeatures: function(){$('.las-tab').on('keydown',function(e){if(e.key==='Enter' || e.key===' '){e.preventDefault();$(this).click();}});if(!$('#las-aria-live').length){$('body').append('<div id="las-aria-live" aria-live="polite" aria-atomic="true" class="screen-reader-text"></div>');}$(document).on('las-tab-change',function(e){$('#las-aria-live').text('Switched to '+e.detail.tabId+' tab');});},setupLoadingStates: function(){$('.las-card').each(function(){var $card=$(this);if(!$card.find('.las-skeleton').length){$card.prepend('<div class="las-skeleton-container" style="display: none;"><div class="las-skeleton las-skeleton-text"></div><div class="las-skeleton las-skeleton-text"></div><div class="las-skeleton las-skeleton-button"></div></div>');}});},setupThemeToggle: function(){$('.las-theme-toggle').on('click',function(){if(ModernUIManager.themeManager){ModernUIManager.themeManager.toggleTheme();var $button=$(this);var $icon=$button.find('.las-theme-toggle-icon');var $text=$button.find('.las-theme-toggle-text');var currentTheme=ModernUIManager.themeManager.getCurrentTheme();if(currentTheme==='dark'){$icon.text('☀️');$text.text('Light Mode');}else{$icon.text('🌙');$text.text('Dark Mode');}}});},setupSearchAndFilters: function(){var $searchInput=$('#las-settings-search');var $searchResults=$('#las-search-results');var searchTimeout;$searchInput.on('input',function(){var query=$(this).val().toLowerCase();clearTimeout(searchTimeout);searchTimeout=setTimeout(function(){if(query.length > 2){ModernUIIntegration.performSearch(query);$searchResults.show();}else{$searchResults.hide();}},300);});$('.las-filter-button').on('click',function(){var $button=$(this);var filter=$button.data('filter');$('.las-filter-button').removeClass('active');$button.addClass('active');ModernUIIntegration.applyFilter(filter);});},performSearch: function(query){var results=[];var $resultsContent=$('#las-search-results .las-search-results-content');$('.las-form label,.las-form .description').each(function(){var $element=$(this);var text=$element.text().toLowerCase();if(text.includes(query)){var $section=$element.closest('.las-tab-panel');var sectionId=$section.attr('id');var sectionTitle=$('.las-tab[aria-controls="'+sectionId+'"] .las-tab-text').text();results.push({title: $element.text().trim(),section: sectionTitle,sectionId: sectionId.replace('las-tab-','')});}});$resultsContent.empty();if(results.length > 0){results.forEach(function(result){var $result=$('<div class="las-search-result" role="option">').html('<strong>'+result.title+'</strong><br><small>'+result.section+'</small>').on('click',function(){StateManager.activateTab(result.sectionId);$('#las-search-results').hide();$searchInput.val('');});$resultsContent.append($result);});$('.las-search-results-count').text(results.length+' results found');}else{$resultsContent.html('<div class="las-search-no-results">No results found</div>');$('.las-search-results-count').text('No results');}},applyFilter: function(filter){if(filter==='all'){$('.las-tab-panel').show();return;}$('.las-tab-panel').hide();$('.las-tab-panel').each(function(){var $panel=$(this);var panelId=$panel.attr('id');var showPanel=false;switch(filter){case 'layout': showPanel=panelId.includes('general')|| panelId.includes('menu')|| panelId.includes('adminbar');break;case 'colors': showPanel=$panel.find('[type="color"],.wp-color-picker').length > 0;break;case 'typography': showPanel=$panel.find('select[name*="font"],input[name*="font"]').length > 0;break;case 'advanced': showPanel=panelId.includes('advanced')|| panelId.includes('logos');break;}if(showPanel){$panel.show();}});}};try{SecurityManager.init();StateManager.init();ErrorManager.init();ModernUIIntegration.init();console.log('LAS: All managers initialized successfully');}catch(error){console.error('LAS: Initialization error:',error);}window.lasAjax=function(action,data,options){options=options ||{};data=data ||{};if(!action){console.error('LAS AJAX: Action is required');return Promise.reject(new Error('Action is required'));}var requestData=$.extend({},data,{action: action.indexOf('las_')===0 ? action : 'las_'+action,nonce: SecurityManager.getCurrentNonce()});return new Promise(function(resolve,reject){$.post(lasAdminData.ajax_url,requestData).done(function(response){if(response.success){resolve(response.data);}else{reject(new Error(response.data.message || 'Request failed'));}}).fail(function(jqXHR,textStatus,errorThrown){reject(new Error('Network error: '+textStatus));});});};function cleanup(){console.log('LAS: Cleaning up admin settings resources...');if(StateManager && typeof StateManager.cleanup==='function'){StateManager.cleanup();}if(ErrorManager && typeof ErrorManager.cleanup==='function'){ErrorManager.cleanup();}if(SecurityManager && typeof SecurityManager.cleanup==='function'){SecurityManager.cleanup();}$(document).off('.las-error-manager');$(document).off('.las-fallback-tabs');$(window).off('.las-error-manager');console.log('LAS: Admin settings cleanup complete');}window.LASAdminSettings={cleanup: cleanup,StateManager: StateManager,ErrorManager: ErrorManager,SecurityManager: SecurityManager};$(window).on('beforeunload.las-admin-settings',cleanup);window.StateManager=StateManager;window.ErrorManager=ErrorManager;window.SecurityManager=SecurityManager;});}else{console.warn('LAS: jQuery not available-skipping initialization');}var AccessibilityEnhancer={accessibilityManager: null,init: function(){console.log('LAS: Initializing Accessibility Enhancements...');if(typeof AccessibilityManager !=='undefined'){this.accessibilityManager=new AccessibilityManager();console.log('✅ Accessibility Manager initialized');}this.addSkipLinks();this.enhanceAriaLabels();this.setupKeyboardNavigation();this.setupFocusManagement();this.setupFormValidation();this.setupColorContrastValidation();console.log('LAS: Accessibility Enhancements initialized');},addSkipLinks: function(){if($('.las-skip-link').length===0){var skipLinks=` <a href="#las-main-content" class="las-skip-link las-sr-only-focusable">Skip to main content</a> <a href="#las-navigation" class="las-skip-link las-sr-only-focusable">Skip to navigation</a> `;$('body').prepend(skipLinks);}},enhanceAriaLabels: function(){if(!$('#las-main-content').length){$('.wrap').attr('id','las-main-content').attr('role','main');}$('.nav-tab-wrapper').attr('id','las-navigation').attr('role','navigation').attr('aria-label','Settings navigation');$('.nav-tab').each(function(index){var $tab=$(this);var href=$tab.attr('href')|| '';var tabId=href.replace('#','')+'-tab';var panelId=href.replace('#','');$tab.attr({'role': 'tab','id': tabId,'aria-controls': panelId,'aria-selected': $tab.hasClass('nav-tab-active')? 'true' : 'false','tabindex': $tab.hasClass('nav-tab-active')? '0' : '-1'});});$('.las-tab-content,.ui-tabs-panel').each(function(){var $panel=$(this);var panelId=$panel.attr('id');var tabId=panelId+'-tab';$panel.attr({'role': 'tabpanel','aria-labelledby': tabId,'tabindex': '0'});});$('input,select,textarea').each(function(){var $input=$(this);var $label=$('label[for="'+$input.attr('id')+'"]');if(!$label.length && !$input.attr('aria-label')){var placeholder=$input.attr('placeholder');if(placeholder){$input.attr('aria-label',placeholder);}}if($input.prop('required')){$label.attr('aria-required','true');}if(!$input.hasClass('las-input')){$input.css('min-height','44px');}});$('button,input[type="button"],input[type="submit"]').each(function(){var $button=$(this);if(!$button.hasClass('las-button')){$button.css('min-height','44px');}if(!$button.attr('aria-label')&& !$button.text().trim()){var title=$button.attr('title');if(title){$button.attr('aria-label',title);}}});$('.color-picker,.wp-color-picker').each(function(){var $picker=$(this);if(!$picker.attr('aria-label')){$picker.attr('aria-label','Color picker');}$picker.attr('role','button').attr('aria-haspopup','dialog');});$('.wp-picker-open').each(function(){var $button=$(this);if(!$button.attr('aria-label')){$button.attr('aria-label','Open color picker');}$button.attr('aria-haspopup','dialog');});},setupKeyboardNavigation: function(){var self=this;$('.nav-tab').on('keydown',function(e){var $tabs=$('.nav-tab');var currentIndex=$tabs.index(this);var targetIndex=currentIndex;switch(e.key){case 'ArrowRight': targetIndex=(currentIndex+1)% $tabs.length;break;case 'ArrowLeft': targetIndex=currentIndex===0 ? $tabs.length-1 : currentIndex-1;break;case 'Home': targetIndex=0;break;case 'End': targetIndex=$tabs.length-1;break;default: return;}e.preventDefault();var $targetTab=$tabs.eq(targetIndex);$targetTab.trigger('click').focus();self.announceToScreenReader('Switched to '+$targetTab.text().trim()+' tab');});$(document).on('keydown',function(e){if(e.altKey && e.key==='m'){e.preventDefault();$('#las-main-content').focus();self.announceToScreenReader('Skipped to main content');}if(e.altKey && e.key==='s'){e.preventDefault();if(self.accessibilityManager){self.accessibilityManager.toggleScreenReaderMode();}}if(e.altKey && e.key==='/'){e.preventDefault();var $search=$('input[type="search"],#las-search');if($search.length){$search.first().focus();self.announceToScreenReader('Search focused');}}if(e.key==='Escape'){$('.wp-picker-active').find('.wp-picker-close').trigger('click');if(self.accessibilityManager){self.accessibilityManager.releaseFocusTrap();}}});},setupFocusManagement: function(){$(document).on('focusin',function(e){$(e.target).addClass('las-focused');var $element=$(e.target);if($element.hasClass('las-announce-focus')&& $element.attr('aria-label')){this.announceToScreenReader('Focused: '+$element.attr('aria-label'));}}.bind(this)).on('focusout',function(e){$(e.target).removeClass('las-focused');});$(document).on('keydown',function(){$('body').addClass('las-keyboard-navigation');}).on('mousedown',function(){$('body').removeClass('las-keyboard-navigation');});$(document).on('focusin',function(e){var $element=$(e.target);if($element.length){var elementTop=$element.offset().top;var elementBottom=elementTop+$element.outerHeight();var viewportTop=$(window).scrollTop();var viewportBottom=viewportTop+$(window).height();if(elementTop < viewportTop || elementBottom > viewportBottom){$element[0].scrollIntoView({behavior: 'smooth',block: 'nearest'});}}});$(document).on('wp-picker-open',function(e){var $picker=$(e.target);var $container=$picker.closest('.wp-picker-container');if(this.accessibilityManager){this.accessibilityManager.createFocusTrap($container[0]);}}.bind(this));$(document).on('wp-picker-close',function(e){if(this.accessibilityManager){this.accessibilityManager.releaseFocusTrap();}}.bind(this));},setupFormValidation: function(){var self=this;$('form').on('submit',function(e){var $form=$(this);var hasErrors=false;var errorMessages=[];$form.find('[required]').each(function(){var $field=$(this);var value=$field.val().trim();if(!value){hasErrors=true;$field.attr('aria-invalid','true');var label=$field.attr('aria-label')|| $('label[for="'+$field.attr('id')+'"]').text()|| 'Field';errorMessages.push(label+' is required');$field.addClass('las-error');}else{$field.attr('aria-invalid','false');$field.removeClass('las-error');}});$form.find('input[type="email"]').each(function(){var $field=$(this);var value=$field.val().trim();if(value && !self.isValidEmail(value)){hasErrors=true;$field.attr('aria-invalid','true');$field.addClass('las-error');errorMessages.push('Please enter a valid email address');}});if(hasErrors){e.preventDefault();var errorMessage='Form has '+errorMessages.length+' error'+(errorMessages.length > 1 ? 's' : '')+': '+errorMessages.join(',');self.announceToScreenReader(errorMessage,true);$form.find('[aria-invalid="true"]').first().focus();window.dispatchEvent(new CustomEvent('las-form-change',{detail:{hasErrors: true,errors: errorMessages}}));}});$('input,select,textarea').on('blur',function(){var $field=$(this);var value=$field.val().trim();if($field.prop('required')&& !value){$field.attr('aria-invalid','true');$field.addClass('las-error');}else if($field.attr('type')==='email' && value && !self.isValidEmail(value)){$field.attr('aria-invalid','true');$field.addClass('las-error');}else{$field.attr('aria-invalid','false');$field.removeClass('las-error');}});},setupColorContrastValidation: function(){var self=this;$(document).on('change','.color-picker,.wp-color-picker',function(){var $picker=$(this);var color=$picker.val();var contrastRatio=self.calculateContrastRatio(color,'#ffffff');if(contrastRatio < 4.5){self.announceToScreenReader('Warning: Low contrast ratio detected',true);window.dispatchEvent(new CustomEvent('las-validation-error',{detail:{message: 'Color contrast may not meet accessibility standards',field: $picker.attr('id')|| 'color picker',ratio: contrastRatio}}));}});},announceToScreenReader: function(message,assertive){if(this.accessibilityManager){this.accessibilityManager.announceToScreenReader(message,assertive);}else{var liveRegionId=assertive ? 'las-live-region-assertive' : 'las-live-region';var $liveRegion=$('#'+liveRegionId);if(!$liveRegion.length){$liveRegion=$('<div>').attr('id',liveRegionId).attr('aria-live',assertive ? 'assertive' : 'polite').attr('aria-atomic','true').addClass('las-sr-only').appendTo('body');}$liveRegion.text('');setTimeout(function(){$liveRegion.text(message);},100);setTimeout(function(){$liveRegion.text('');},3000);}},isValidEmail: function(email){var emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email);},calculateContrastRatio: function(color1,color2){return 4.5;},createFocusTrap: function(container){if(this.accessibilityManager){return this.accessibilityManager.createFocusTrap(container);}var focusableElements=$(container).find('button,input,select,textarea,a[href],[tabindex]:not([tabindex="-1"])');if(focusableElements.length > 0){focusableElements.first().focus();$(container).on('keydown.focus-trap',function(e){if(e.key==='Tab'){var firstElement=focusableElements.first()[0];var lastElement=focusableElements.last()[0];if(e.shiftKey){if(document.activeElement===firstElement){e.preventDefault();lastElement.focus();}}else{if(document.activeElement===lastElement){e.preventDefault();firstElement.focus();}}}});}},releaseFocusTrap: function(container){if(this.accessibilityManager){return this.accessibilityManager.releaseFocusTrap();}if(container){$(container).off('.focus-trap');}else{$('[data-focus-trap]').off('.focus-trap');}},getAccessibilityReport: function(){if(this.accessibilityManager){return this.accessibilityManager.getAccessibilityReport();}return{focusableElements: $('button,input,select,textarea,a[href]').length,ariaLabels: $('[aria-label]').length,skipLinks: $('.las-skip-link').length,liveRegions: $('[aria-live]').length};},cleanup: function(){console.log('LAS AccessibilityEnhancer: Cleaning up...');if(this.accessibilityManager){this.accessibilityManager.destroy();this.accessibilityManager=null;}$(document).off('.las-accessibility');$('.nav-tab').off('keydown');$('[data-focus-trap]').off('.focus-trap');console.log('LAS AccessibilityEnhancer: Cleanup complete');}};if(typeof jQuery !=='undefined' && typeof jQuery.fn !=='undefined'){jQuery(document).ready(function($){setTimeout(function(){AccessibilityEnhancer.init();},100);});jQuery(window).on('beforeunload',function(){if(typeof AccessibilityEnhancer !=='undefined'){AccessibilityEnhancer.cleanup();}});}window.LAS_AccessibilityEnhancer=AccessibilityEnhancer;class LASLivePreviewEngine{constructor(core){this.core=core;this.styleElement=null;this.cssCache=new Map();this.updateQueue=[];this.isProcessing=false;this.cssRuleMap=new Map();this.initialized=false;this.performanceMetrics={updateCount: 0,totalUpdateTime: 0,averageUpdateTime: 0};this.init=this.init.bind(this);this.updateSetting=this.updateSetting.bind(this);this.processUpdateQueue=this.processUpdateQueue.bind(this);this.generateCSS=this.generateCSS.bind(this);this.applyCSS=this.applyCSS.bind(this);}async init(){try{console.log('LAS: Initializing Live Preview Engine...');this.createStyleElement();this.initializeCSSRuleMap();this.bindEvents();await this.loadInitialStyles();this.initialized=true;console.log('LAS: Live Preview Engine initialized successfully');}catch(error){console.error('LAS: Failed to initialize Live Preview Engine:',error);throw error;}}createStyleElement(){const existingStyle=document.getElementById('las-live-preview-styles');if(existingStyle){existingStyle.remove();}this.styleElement=document.createElement('style');this.styleElement.id='las-live-preview-styles';this.styleElement.type='text/css';this.styleElement.setAttribute('data-las-preview','true');document.head.appendChild(this.styleElement);console.log('LAS: Live preview style element created');}initializeCSSRuleMap(){this.addCSSRuleMapping('menu_background_color',{selector: '#adminmenu,#adminmenu .wp-submenu,#adminmenu .wp-submenu ul',property: 'background-color',important: true,description: 'Main admin menu background color'});this.addCSSRuleMapping('menu_text_color',{selector: '#adminmenu a,#adminmenu .wp-submenu a,#adminmenu .wp-menu-name',property: 'color',important: true,description: 'Admin menu text color'});this.addCSSRuleMapping('menu_hover_color',{selector: '#adminmenu a:hover,#adminmenu .wp-submenu a:hover,#adminmenu li:hover a',property: 'color',important: true,description: 'Admin menu hover text color'});this.addCSSRuleMapping('menu_hover_background',{selector: '#adminmenu a:hover,#adminmenu .wp-submenu a:hover,#adminmenu li:hover',property: 'background-color',important: true,description: 'Admin menu hover background color'});this.addCSSRuleMapping('menu_active_color',{selector: '#adminmenu .wp-has-current-submenu .wp-submenu .wp-submenu-head,#adminmenu .wp-menu-arrow,#adminmenu .wp-menu-arrow div,#adminmenu li.current a.menu-top,#adminmenu li.wp-has-current-submenu a.wp-has-current-submenu,#adminmenu .current a.menu-top',property: 'color',important: true,description: 'Active menu item text color'});this.addCSSRuleMapping('menu_active_background',{selector: '#adminmenu li.current a.menu-top,#adminmenu li.wp-has-current-submenu a.wp-has-current-submenu,#adminmenu .current',property: 'background-color',important: true,description: 'Active menu item background color'});this.addCSSRuleMapping('menu_separator_color',{selector: '#adminmenu li.wp-menu-separator',property: 'border-color',important: true,description: 'Menu separator color'});this.addCSSRuleMapping('menu_icon_color',{selector: '#adminmenu .wp-menu-image:before,#adminmenu .wp-menu-image img',property: 'color',important: true,description: 'Menu icon color'});this.addCSSRuleMapping('adminbar_background',{selector: '#wpadminbar',property: 'background',important: true,description: 'Admin bar background'});this.addCSSRuleMapping('adminbar_text_color',{selector: '#wpadminbar .ab-item,#wpadminbar a.ab-item,#wpadminbar > #wp-toolbar span.ab-label,#wpadminbar > #wp-toolbar span.noticon,#wpadminbar .ab-top-menu > li > .ab-item',property: 'color',important: true,description: 'Admin bar text color'});this.addCSSRuleMapping('adminbar_hover_color',{selector: '#wpadminbar .ab-top-menu > li:hover > .ab-item,#wpadminbar .ab-top-menu > li.hover > .ab-item,#wpadminbar .ab-top-menu > li > .ab-item:focus,#wpadminbar .ab-submenu .ab-item:hover',property: 'color',important: true,description: 'Admin bar hover text color'});this.addCSSRuleMapping('adminbar_hover_background',{selector: '#wpadminbar .ab-top-menu > li:hover > .ab-item,#wpadminbar .ab-top-menu > li.hover > .ab-item,#wpadminbar .ab-top-menu > li > .ab-item:focus,#wpadminbar .ab-submenu .ab-item:hover',property: 'background-color',important: true,description: 'Admin bar hover background color'});this.addCSSRuleMapping('adminbar_submenu_background',{selector: '#wpadminbar .ab-submenu,#wpadminbar .quicklinks .menupop ul li',property: 'background-color',important: true,description: 'Admin bar submenu background'});this.addCSSRuleMapping('content_background',{selector: '#wpbody-content,.wrap,#wpbody',property: 'background-color',important: true,description: 'Main content area background'});this.addCSSRuleMapping('content_text_color',{selector: '#wpbody-content,.wrap,#wpbody-content h1,#wpbody-content h2,#wpbody-content h3,#wpbody-content h4,#wpbody-content p',property: 'color',important: true,description: 'Content area text color'});this.addCSSRuleMapping('content_link_color',{selector: '#wpbody-content a,.wrap a',property: 'color',important: true,description: 'Content area link color'});this.addCSSRuleMapping('content_link_hover_color',{selector: '#wpbody-content a:hover,.wrap a:hover',property: 'color',important: true,description: 'Content area link hover color'});this.addCSSRuleMapping('form_background',{selector: '.form-table,.form-table th,.form-table td,.form-wrap',property: 'background-color',important: true,description: 'Form table background'});this.addCSSRuleMapping('form_border_color',{selector: '.form-table,.form-table th,.form-table td,input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"],input[type="number"],input[type="tel"],input[type="range"],input[type="date"],input[type="month"],input[type="week"],input[type="time"],input[type="datetime"],input[type="datetime-local"],input[type="color"],select,textarea',property: 'border-color',important: true,description: 'Form element border color'});this.addCSSRuleMapping('form_input_background',{selector: 'input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"],input[type="number"],input[type="tel"],input[type="date"],input[type="month"],input[type="week"],input[type="time"],input[type="datetime"],input[type="datetime-local"],select,textarea',property: 'background-color',important: true,description: 'Form input background color'});this.addCSSRuleMapping('form_input_text_color',{selector: 'input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"],input[type="number"],input[type="tel"],input[type="date"],input[type="month"],input[type="week"],input[type="time"],input[type="datetime"],input[type="datetime-local"],select,textarea',property: 'color',important: true,description: 'Form input text color'});this.addCSSRuleMapping('form_label_color',{selector: '.form-table th,.form-table label,.form-wrap label',property: 'color',important: true,description: 'Form label color'});this.addCSSRuleMapping('button_primary_background',{selector: '.button-primary,.wp-core-ui .button-primary',property: 'background-color',important: true,description: 'Primary button background'});this.addCSSRuleMapping('button_primary_text_color',{selector: '.button-primary,.wp-core-ui .button-primary',property: 'color',important: true,description: 'Primary button text color'});this.addCSSRuleMapping('button_primary_border_color',{selector: '.button-primary,.wp-core-ui .button-primary',property: 'border-color',important: true,description: 'Primary button border color'});this.addCSSRuleMapping('button_primary_hover_background',{selector: '.button-primary:hover,.wp-core-ui .button-primary:hover',property: 'background-color',important: true,description: 'Primary button hover background'});this.addCSSRuleMapping('button_secondary_background',{selector: '.button,.button-secondary,.wp-core-ui .button-secondary',property: 'background-color',important: true,description: 'Secondary button background'});this.addCSSRuleMapping('button_secondary_text_color',{selector: '.button,.button-secondary,.wp-core-ui .button-secondary',property: 'color',important: true,description: 'Secondary button text color'});this.addCSSRuleMapping('button_secondary_border_color',{selector: '.button,.button-secondary,.wp-core-ui .button-secondary',property: 'border-color',important: true,description: 'Secondary button border color'});this.addCSSRuleMapping('notice_success_background',{selector: '.notice-success,.updated',property: 'background-color',important: true,description: 'Success notice background'});this.addCSSRuleMapping('notice_error_background',{selector: '.notice-error,.error',property: 'background-color',important: true,description: 'Error notice background'});this.addCSSRuleMapping('notice_warning_background',{selector: '.notice-warning',property: 'background-color',important: true,description: 'Warning notice background'});this.addCSSRuleMapping('notice_info_background',{selector: '.notice-info',property: 'background-color',important: true,description: 'Info notice background'});this.addCSSRuleMapping('table_header_background',{selector: '.wp-list-table thead th,.wp-list-table tfoot th',property: 'background-color',important: true,description: 'Table header background'});this.addCSSRuleMapping('table_row_background',{selector: '.wp-list-table tbody tr,.striped > tbody > :nth-child(odd)',property: 'background-color',important: true,description: 'Table row background'});this.addCSSRuleMapping('table_row_hover_background',{selector: '.wp-list-table tbody tr:hover',property: 'background-color',important: true,description: 'Table row hover background'});this.addCSSRuleMapping('widget_background',{selector: '.postbox,.stuffbox',property: 'background-color',important: true,description: 'Dashboard widget background'});this.addCSSRuleMapping('widget_header_background',{selector: '.postbox .hndle,.stuffbox .hndle',property: 'background-color',important: true,description: 'Widget header background'});this.addCSSRuleMapping('widget_header_text_color',{selector: '.postbox .hndle,.stuffbox .hndle',property: 'color',important: true,description: 'Widget header text color'});this.addCSSRuleMapping('footer_background',{selector: '#wpfooter,#footer-thankyou',property: 'background-color',important: true,description: 'Footer background color'});this.addCSSRuleMapping('footer_text_color',{selector: '#wpfooter,#footer-thankyou,#wpfooter p',property: 'color',important: true,description: 'Footer text color'});console.log('LAS: Comprehensive CSS rule mapping initialized with',this.cssRuleMap.size,'rules');}addCSSRuleMapping(key,config){if(!config.selector || !config.property){console.warn(`LAS: Invalid CSS rule mapping for ${key}:`,config);return;}const ruleConfig={selector: config.selector,property: config.property,important: config.important !==false,description: config.description || `CSS rule for ${key}`,category: this.getCategoryFromKey(key)};this.cssRuleMap.set(key,ruleConfig);}getCategoryFromKey(key){if(key.startsWith('menu_'))return 'menu';if(key.startsWith('adminbar_'))return 'adminbar';if(key.startsWith('content_'))return 'content';if(key.startsWith('form_'))return 'forms';if(key.startsWith('button_'))return 'buttons';if(key.startsWith('notice_'))return 'notices';if(key.startsWith('table_'))return 'tables';if(key.startsWith('widget_'))return 'widgets';if(key.startsWith('footer_'))return 'footer';return 'general';}bindEvents(){if(this.core){this.core.on('settings:changed',(data)=>{this.updateSetting(data.key,data.value);});this.core.on('core:ready',()=>{console.log('LAS: Live Preview Engine ready for updates');});}window.addEventListener('resize',this.debounce(()=>{this.refreshAllStyles();},250));}async loadInitialStyles(){try{const settingsManager=this.core?.get('settings');if(!settingsManager){console.warn('LAS: Settings manager not available,skipping initial styles');return;}const settings=settingsManager.getAllSettings();if(!settings || Object.keys(settings).length===0){console.log('LAS: No initial settings found');return;}const cssRules=[];for(const [key,value] of Object.entries(settings)){const cssRule=this.generateCSSRule(key,value);if(cssRule){cssRules.push(cssRule);this.cssCache.set(key,cssRule);}}if(cssRules.length > 0){const css=cssRules.join('\n');this.applyCSS(css);console.log('LAS: Initial styles applied for',cssRules.length,'settings');}}catch(error){console.error('LAS: Failed to load initial styles:',error);if(this.core?.get('error')){this.core.get('error').handleError(error,'Loading initial styles');}}}updateSetting(key,value){if(!this.initialized){console.warn('LAS: Live Preview Engine not initialized,queuing update');}this.updateQueue.push({key,value,timestamp: Date.now()});this.processUpdateQueue();}processUpdateQueue(){if(this.isProcessing)return;this.isProcessing=true;requestAnimationFrame(()=>{const startTime=performance.now();try{const updates=[...this.updateQueue];this.updateQueue=[];if(updates.length===0){this.isProcessing=false;return;}const css=this.generateCSS(updates);if(css){this.applyCSS(css);}const endTime=performance.now();const updateTime=endTime-startTime;this.updatePerformanceMetrics(updateTime,updates.length);console.log(`LAS: Processed ${updates.length}updates in ${updateTime.toFixed(2)}ms`);}catch(error){console.error('LAS: Error processing update queue:',error);if(this.core?.get('error')){this.core.get('error').handleError(error,'Processing live preview updates');}}finally{this.isProcessing=false;if(this.updateQueue.length > 0){setTimeout(()=> this.processUpdateQueue(),16);}}});}generateCSS(updates){let css='';const processedKeys=new Set();const newRules=[];for(let i=updates.length-1;i >=0;i--){const{key,value}=updates[i];if(processedKeys.has(key))continue;processedKeys.add(key);const cacheKey=`${key}:${value}`;if(this.cssGenerationCache && this.cssGenerationCache.has(cacheKey)){const cachedRule=this.cssGenerationCache.get(cacheKey);css=cachedRule+'\n'+css;this.cssCache.set(key,cachedRule);continue;}const cssRule=this.generateCSSRule(key,value);if(cssRule){css=cssRule+'\n'+css;this.cssCache.set(key,cssRule);newRules.push({key,value,rule: cssRule});if(!this.cssGenerationCache){this.cssGenerationCache=new Map();}this.cssGenerationCache.set(cacheKey,cssRule);}}if(newRules.length > 0){console.log(`LAS: Generated ${newRules.length}new CSS rules,used cache for ${updates.length-newRules.length}rules`);}return css;}generateCSSRule(key,value){if(value===null || value===undefined || value===''){return null;}const ruleConfig=this.cssRuleMap.get(key);if(!ruleConfig){return this.generateDynamicCSSRule(key,value);}const{selector,property,important=false}=ruleConfig;const importantFlag=important ? ' !important' : '';const sanitizedValue=this.sanitizeCSSValue(property,value);if(!sanitizedValue){return null;}return `${selector}{${property}: ${sanitizedValue}${importantFlag};}`;}generateDynamicCSSRule(key,value){if(key==='custom_css' && typeof value==='string'){return this.sanitizeCustomCSS(value);}if(key.includes('font_size')&& !isNaN(value)){const selector=this.getFontSizeSelector(key);if(selector){return `${selector}{font-size: ${value}px !important;}`;}}if(key.includes('opacity')&& !isNaN(value)){const selector=this.getOpacitySelector(key);if(selector){const opacity=Math.max(0,Math.min(1,parseFloat(value)));return `${selector}{opacity: ${opacity}!important;}`;}}return null;}getFontSizeSelector(key){const fontSizeMap={'menu_font_size': '#adminmenu a','content_font_size': '#wpbody-content,.wrap','adminbar_font_size': '#wpadminbar .ab-item'};return fontSizeMap[key] || null;}getOpacitySelector(key){const opacityMap={'menu_opacity': '#adminmenu','adminbar_opacity': '#wpadminbar','content_opacity': '#wpbody-content'};return opacityMap[key] || null;}sanitizeCSSValue(property,value){if(typeof value !=='string' && typeof value !=='number'){return null;}const stringValue=String(value).trim();if(property.includes('color')|| property==='background'){return this.sanitizeColorValue(stringValue);}if(property.includes('size')|| property.includes('width')|| property.includes('height')){return this.sanitizeSizeValue(stringValue);}const dangerous=/javascript:|expression\(|@import|behavior:|vbscript:/i;if(dangerous.test(stringValue)){return null;}if(!/^[a-zA-Z0-9\s\-_.,#%()]+$/.test(stringValue)){return null;}return stringValue;}sanitizeColorValue(value){if(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value)){return value;}if(/^rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/.test(value)){return value.replace(/rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/,(match,r,g,b)=>{const red=Math.max(0,Math.min(255,parseInt(r)));const green=Math.max(0,Math.min(255,parseInt(g)));const blue=Math.max(0,Math.min(255,parseInt(b)));return `rgb(${red},${green},${blue})`;});}if(/^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)$/.test(value)){return value.replace(/rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/,(match,r,g,b,a)=>{const red=Math.max(0,Math.min(255,parseInt(r)));const green=Math.max(0,Math.min(255,parseInt(g)));const blue=Math.max(0,Math.min(255,parseInt(b)));const alpha=Math.max(0,Math.min(1,parseFloat(a)));return `rgba(${red},${green},${blue},${alpha})`;});}const namedColors=['transparent','inherit','initial','unset','black','white','red','green','blue','yellow','orange','purple','pink','brown','gray','grey'];if(namedColors.includes(value.toLowerCase())){return value.toLowerCase();}return null;}sanitizeSizeValue(value){if(/^\d+(\.\d+)?(px|em|rem|%|vh|vw|pt|pc|in|cm|mm|ex|ch)$/.test(value)){return value;}if(/^\d+(\.\d+)?$/.test(value)){return value+'px';}const sizeKeywords=['auto','inherit','initial','unset','normal','bold','lighter','bolder'];if(sizeKeywords.includes(value.toLowerCase())){return value.toLowerCase();}return null;}sanitizeCustomCSS(css){const dangerous=[/javascript\s*:/gi,/expression\s*\(/gi,/@import/gi,/behavior\s*:/gi,/-moz-binding/gi,/vbscript\s*:/gi,/<script/gi,/<\/script>/gi ];let sanitized=css;dangerous.forEach(pattern=>{sanitized=sanitized.replace(pattern,'');});return sanitized;}applyCSS(css){if(!this.styleElement){console.error('LAS: Style element not available');return;}try{const cachedCSS=Array.from(this.cssCache.values()).join('\n');const finalCSS=cachedCSS+'\n'+css;this.styleElement.textContent=finalCSS;if(this.core){this.core.emit('preview:updated',{cssLength: finalCSS.length,timestamp: Date.now()});}}catch(error){console.error('LAS: Failed to apply CSS:',error);if(this.core?.get('error')){this.core.get('error').handleError(error,'Applying live preview CSS');}}}refreshAllStyles(){try{console.log('LAS: Refreshing all live preview styles...');const settingsManager=this.core?.get('settings');if(!settingsManager){console.warn('LAS: Settings manager not available for refresh');return;}this.cssCache.clear();this.loadInitialStyles();}catch(error){console.error('LAS: Failed to refresh styles:',error);if(this.core?.get('error')){this.core.get('error').handleError(error,'Refreshing live preview styles');}}}updatePerformanceMetrics(updateTime,updateCount){this.performanceMetrics.updateCount+=updateCount;this.performanceMetrics.totalUpdateTime+=updateTime;this.performanceMetrics.averageUpdateTime=this.performanceMetrics.totalUpdateTime/this.performanceMetrics.updateCount;}getPerformanceMetrics(){return{...this.performanceMetrics};}debounce(func,wait){let timeout;return function executedFunction(...args){const later=()=>{clearTimeout(timeout);func(...args);};clearTimeout(timeout);timeout=setTimeout(later,wait);};}isInitialized(){return this.initialized;}getCSSCache(){return new Map(this.cssCache);}clearCache(){this.cssCache.clear();if(this.cssGenerationCache){this.cssGenerationCache.clear();}if(this.styleElement){this.styleElement.textContent='';}console.log('LAS: Live preview cache cleared');}getCSSRuleMapping(key=null){if(key){return this.cssRuleMap.get(key)|| null;}return new Map(this.cssRuleMap);}getCSSRulesByCategory(category){const categoryRules=new Map();for(const [key,config] of this.cssRuleMap){if(config.category===category){categoryRules.set(key,config);}}return categoryRules;}getAvailableCategories(){const categories=new Set();for(const [,config] of this.cssRuleMap){categories.add(config.category);}return Array.from(categories).sort();}addOrUpdateCSSRule(key,config){try{this.addCSSRuleMapping(key,config);if(this.cssGenerationCache){for(const cacheKey of this.cssGenerationCache.keys()){if(cacheKey.startsWith(`${key}:`)){this.cssGenerationCache.delete(cacheKey);}}}console.log(`LAS: CSS rule mapping updated for ${key}`);return true;}catch(error){console.error(`LAS: Failed to update CSS rule mapping for ${key}:`,error);return false;}}removeCSSRule(key){try{const removed=this.cssRuleMap.delete(key);if(removed){this.cssCache.delete(key);if(this.cssGenerationCache){for(const cacheKey of this.cssGenerationCache.keys()){if(cacheKey.startsWith(`${key}:`)){this.cssGenerationCache.delete(cacheKey);}}}console.log(`LAS: CSS rule mapping removed for ${key}`);}return removed;}catch(error){console.error(`LAS: Failed to remove CSS rule mapping for ${key}:`,error);return false;}}validateCSSRuleMapping(config){const errors=[];const warnings=[];if(!config.selector){errors.push('Selector is required');}if(!config.property){errors.push('Property is required');}if(config.selector && !/^[a-zA-Z0-9\s\-_#.,:\[\]()>+~*"'=]+$/.test(config.selector)){warnings.push('Selector contains potentially unsafe characters');}if(config.property && !/^[a-zA-Z\-]+$/.test(config.property)){errors.push('Invalid CSS property name');}const dangerousProperties=['behavior','expression','-moz-binding'];if(config.property && dangerousProperties.includes(config.property.toLowerCase())){errors.push('Property is not allowed for security reasons');}return{valid: errors.length===0,errors,warnings};}getCSSGenerationStats(){return{totalRules: this.cssRuleMap.size,cachedRules: this.cssCache.size,generationCacheSize: this.cssGenerationCache ? this.cssGenerationCache.size : 0,categories: this.getAvailableCategories().length,performanceMetrics: this.getPerformanceMetrics()};}cleanup(){console.log('LAS: Cleaning up Live Preview Engine...');try{this.updateQueue=[];this.isProcessing=false;this.cssCache.clear();if(this.styleElement && this.styleElement.parentNode){this.styleElement.parentNode.removeChild(this.styleElement);this.styleElement=null;}this.cssRuleMap.clear();this.initialized=false;console.log('LAS: Live Preview Engine cleanup complete');}catch(error){console.error('LAS: Error during Live Preview Engine cleanup:',error);}}}class LASFormElementBinder{constructor(core,settingsManager){this.core=core;this.settingsManager=settingsManager;this.boundElements=new Map();this.debounceTimers=new Map();this.validationRules=new Map();this.errorElements=new Map();this.bindAllElements=this.bindAllElements.bind(this);this.bindColorPickers=this.bindColorPickers.bind(this);this.bindTextInputs=this.bindTextInputs.bind(this);this.bindSliders=this.bindSliders.bind(this);this.bindToggles=this.bindToggles.bind(this);this.bindDropdowns=this.bindDropdowns.bind(this);this.bindTextareas=this.bindTextareas.bind(this);this.bindImageUploads=this.bindImageUploads.bind(this);this.validateField=this.validateField.bind(this);this.showFieldError=this.showFieldError.bind(this);this.clearFieldError=this.clearFieldError.bind(this);this.setupValidationRules();}setupValidationRules(){this.validationRules.set('color',{pattern:/^(#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})|rgb\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*\)|rgba\(\s*\d+\s*,\s*\d+\s*,\s*\d+\s*,\s*[\d.]+\s*\))$/,message: 'Please enter a valid color(hex,rgb,or rgba format)'});this.validationRules.set('url',{pattern:/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/,message: 'Please enter a valid URL'});this.validationRules.set('number',{validate:(value,min,max)=>{const num=parseFloat(value);if(isNaN(num))return false;if(min !==undefined && num < min)return false;if(max !==undefined && num > max)return false;return true;},message: 'Please enter a valid number within the allowed range'});this.validationRules.set('css',{validate:(value)=>{const dangerousPatterns=[/javascript\s*:/i,/expression\s*\(/i,/@import/i,/behavior\s*:/i,/-moz-binding/i,/vbscript\s*:/i ];return !dangerousPatterns.some(pattern=> pattern.test(value));},message: 'CSS contains potentially dangerous content'});}bindAllElements(){try{console.log('LAS: Starting comprehensive form element binding...');this.bindColorPickers();this.bindTextInputs();this.bindSliders();this.bindToggles();this.bindDropdowns();this.bindTextareas();this.bindImageUploads();this.setupFormValidation();this.setupAccessibilityFeatures();console.log(`LAS: Form element binding complete. Bound ${this.boundElements.size}elements.`);}catch(error){this.core.handleError(error,'Form element binding');}}bindColorPickers(){const colorPickers=document.querySelectorAll('.las-fresh-color-picker,input[type="color"]');colorPickers.forEach(picker=>{const settingKey=this.getSettingKey(picker);if(!settingKey)return;this.boundElements.set(settingKey,{element: picker,type: 'color',validator: 'color'});picker.addEventListener('change',(e)=>{if(this.validateField(picker,e.target.value)){this.settingsManager.set(settingKey,e.target.value);this.clearFieldError(picker);}});picker.addEventListener('input',(e)=>{if(this.validateField(picker,e.target.value)){this.settingsManager.set(settingKey,e.target.value,{skipSave: true});this.clearFieldError(picker);}});if(picker.type==='text' && picker.classList.contains('las-fresh-color-picker')){this.enhanceColorPicker(picker);}});console.log(`LAS: Bound ${colorPickers.length}color picker elements`);}enhanceColorPicker(picker){const preview=document.createElement('div');preview.className='las-color-preview';preview.style.cssText=` width: 30px;height: 30px;border: 2px solid #ddd;border-radius: 4px;display: inline-block;margin-left: 8px;vertical-align: middle;cursor: pointer;background-color: ${picker.value || '#ffffff'};`;picker.parentNode.insertBefore(preview,picker.nextSibling);picker.addEventListener('input',()=>{if(this.validateField(picker,picker.value)){preview.style.backgroundColor=picker.value;}});preview.addEventListener('click',()=>{const colorInput=document.createElement('input');colorInput.type='color';colorInput.value=picker.value || '#ffffff';colorInput.style.opacity='0';colorInput.style.position='absolute';colorInput.style.pointerEvents='none';document.body.appendChild(colorInput);colorInput.click();colorInput.addEventListener('change',()=>{picker.value=colorInput.value;picker.dispatchEvent(new Event('input',{bubbles: true}));picker.dispatchEvent(new Event('change',{bubbles: true}));document.body.removeChild(colorInput);});});}bindTextInputs(){const textInputs=document.querySelectorAll('input[type="text"]:not(.las-fresh-color-picker),input[type="url"],input[type="email"],input[type="number"]');textInputs.forEach(input=>{const settingKey=this.getSettingKey(input);if(!settingKey)return;let validator='text';if(input.type==='url' || settingKey.includes('url')){validator='url';}else if(input.type==='number' || settingKey.includes('size')|| settingKey.includes('width')|| settingKey.includes('height')){validator='number';}else if(settingKey.includes('css')){validator='css';}this.boundElements.set(settingKey,{element: input,type: input.type==='number' ? 'number' : 'text',validator: validator});input.addEventListener('input',(e)=>{this.debouncedUpdate(settingKey,e.target.value,input);});input.addEventListener('blur',(e)=>{if(this.validateField(input,e.target.value)){this.settingsManager.set(settingKey,e.target.value);this.clearFieldError(input);}});});console.log(`LAS: Bound ${textInputs.length}text input elements`);}bindSliders(){const sliders=document.querySelectorAll('input[type="range"],.las-slider');const numberInputs=document.querySelectorAll('.las-slider-input');sliders.forEach(slider=>{const settingKey=this.getSettingKey(slider);if(!settingKey)return;this.boundElements.set(settingKey,{element: slider,type: 'slider',validator: 'number'});slider.addEventListener('input',(e)=>{const value=parseFloat(e.target.value);if(this.validateField(slider,value)){this.settingsManager.set(settingKey,value,{skipSave: true});this.updateSliderDisplay(slider,value);this.clearFieldError(slider);}});slider.addEventListener('change',(e)=>{const value=parseFloat(e.target.value);if(this.validateField(slider,value)){this.settingsManager.set(settingKey,value);this.clearFieldError(slider);}});});numberInputs.forEach(input=>{const settingKey=this.getSettingKey(input);if(!settingKey)return;input.addEventListener('input',(e)=>{const value=parseFloat(e.target.value);const min=parseFloat(input.min);const max=parseFloat(input.max);if(this.validateField(input,value,min,max)){this.settingsManager.set(settingKey,value);this.updateAssociatedSlider(settingKey,value);this.clearFieldError(input);}});});console.log(`LAS: Bound ${sliders.length}slider elements and ${numberInputs.length}number inputs`);}updateSliderDisplay(slider,value){const settingKey=this.getSettingKey(slider);const valueDisplay=document.getElementById(`${settingKey}-value`);const unit=slider.dataset.unit || '';if(valueDisplay){valueDisplay.textContent=value+(unit==='none' ? '' : unit);}const numberInput=document.getElementById(settingKey);if(numberInput && numberInput.classList.contains('las-slider-input')){numberInput.value=value;}}updateAssociatedSlider(settingKey,value){const slider=document.getElementById(`${settingKey}-slider`);if(slider){slider.value=value;this.updateSliderDisplay(slider,value);}}bindToggles(){const toggles=document.querySelectorAll('input[type="checkbox"],input[type="radio"]');toggles.forEach(toggle=>{const settingKey=this.getSettingKey(toggle);if(!settingKey)return;this.boundElements.set(settingKey,{element: toggle,type: toggle.type==='radio' ? 'radio' : 'toggle',validator: 'boolean'});toggle.addEventListener('change',(e)=>{let value;if(e.target.type==='radio'){value=e.target.value;}else{value=e.target.checked;}this.settingsManager.set(settingKey,value);this.clearFieldError(toggle);if(toggle.hasAttribute('data-dependency-trigger')){this.handleDependencyTrigger(toggle,value);}});});console.log(`LAS: Bound ${toggles.length}toggle elements`);}bindDropdowns(){const dropdowns=document.querySelectorAll('select');dropdowns.forEach(dropdown=>{const settingKey=this.getSettingKey(dropdown);if(!settingKey)return;this.boundElements.set(settingKey,{element: dropdown,type: 'select',validator: 'select'});dropdown.addEventListener('change',(e)=>{this.settingsManager.set(settingKey,e.target.value);this.clearFieldError(dropdown);if(dropdown.hasAttribute('data-dependency-trigger')){this.handleDependencyTrigger(dropdown,e.target.value);}if(dropdown.classList.contains('las-font-family-select')){this.handleFontFamilyChange(dropdown,e.target.value);}});});console.log(`LAS: Bound ${dropdowns.length}dropdown elements`);}bindTextareas(){const textareas=document.querySelectorAll('textarea');textareas.forEach(textarea=>{const settingKey=this.getSettingKey(textarea);if(!settingKey)return;this.boundElements.set(settingKey,{element: textarea,type: 'textarea',validator: settingKey.includes('css')? 'css' : 'text'});textarea.addEventListener('input',(e)=>{this.debouncedUpdate(settingKey,e.target.value,textarea);});textarea.addEventListener('blur',(e)=>{if(this.validateField(textarea,e.target.value)){this.settingsManager.set(settingKey,e.target.value);this.clearFieldError(textarea);}});});console.log(`LAS: Bound ${textareas.length}textarea elements`);}bindImageUploads(){const imageFields=document.querySelectorAll('.las-image-url-field');const uploadButtons=document.querySelectorAll('.las-upload-image-button');const removeButtons=document.querySelectorAll('.las-remove-image-button');imageFields.forEach(field=>{const settingKey=this.getSettingKey(field);if(!settingKey)return;this.boundElements.set(settingKey,{element: field,type: 'image',validator: 'url'});field.addEventListener('input',(e)=>{this.debouncedUpdate(settingKey,e.target.value,field);this.updateImagePreview(field,e.target.value);});});uploadButtons.forEach(button=>{button.addEventListener('click',(e)=>{e.preventDefault();this.openMediaLibrary(button);});});removeButtons.forEach(button=>{button.addEventListener('click',(e)=>{e.preventDefault();this.removeImage(button);});});console.log(`LAS: Bound ${imageFields.length}image upload elements`);}getSettingKey(element){if(element.dataset.setting){return element.dataset.setting;}if(element.name){const name=element.name;const match=name.match(/\[([^\]]+)\]$/);if(match){return match[1];}return name;}if(element.id){return element.id;}return null;}debouncedUpdate(settingKey,value,element){const timerId=`update_${settingKey}`;if(this.debounceTimers.has(timerId)){clearTimeout(this.debounceTimers.get(timerId));}const timer=setTimeout(()=>{if(this.validateField(element,value)){this.settingsManager.set(settingKey,value);this.clearFieldError(element);}this.debounceTimers.delete(timerId);},300);this.debounceTimers.set(timerId,timer);}validateField(element,value,min,max){const elementInfo=this.boundElements.get(this.getSettingKey(element));if(!elementInfo)return true;const validator=elementInfo.validator;const rule=this.validationRules.get(validator);if(!rule)return true;let isValid=true;if(rule.pattern){isValid=rule.pattern.test(value);}else if(rule.validate){if(validator==='number' &&(min===undefined || max===undefined)){const elementMin=element.getAttribute('min');const elementMax=element.getAttribute('max');min=min !==undefined ? min :(elementMin ? parseFloat(elementMin): undefined);max=max !==undefined ? max :(elementMax ? parseFloat(elementMax): undefined);}isValid=rule.validate(value,min,max);}if(!isValid){this.showFieldError(element,rule.message);return false;}return true;}showFieldError(element,message){const settingKey=this.getSettingKey(element);this.clearFieldError(element);const errorElement=document.createElement('div');errorElement.className='las-field-error';errorElement.textContent=message;errorElement.setAttribute('role','alert');errorElement.setAttribute('aria-live','polite');errorElement.style.cssText=` color: #dc3232;font-size: 12px;margin-top: 4px;display: block;`;element.parentNode.insertBefore(errorElement,element.nextSibling);element.classList.add('las-field-invalid');element.setAttribute('aria-invalid','true');element.setAttribute('aria-describedby',errorElement.id=`${settingKey}-error`);this.errorElements.set(settingKey,errorElement);const errorHandler=this.core.get('error');if(errorHandler){errorHandler.showError(`Validation error: ${message}`,{duration: 3000});}}clearFieldError(element){const settingKey=this.getSettingKey(element);const errorElement=this.errorElements.get(settingKey);if(errorElement && errorElement.parentNode){errorElement.parentNode.removeChild(errorElement);this.errorElements.delete(settingKey);}element.classList.remove('las-field-invalid');element.removeAttribute('aria-invalid');element.removeAttribute('aria-describedby');}handleDependencyTrigger(triggerElement,value){const triggerId=triggerElement.id;const dependentElements=document.querySelectorAll(`[data-dependency-id="${triggerId}"]`);dependentElements.forEach(dependent=>{const requiredValue=dependent.dataset.dependencyValue;const shouldShow=(value.toString()===requiredValue);const wrapper=dependent.closest('.field-row')|| dependent.closest('.las-enhanced-field-wrapper');if(wrapper){wrapper.style.display=shouldShow ? '' : 'none';const inputs=wrapper.querySelectorAll('input,select,textarea');inputs.forEach(input=>{input.setAttribute('aria-hidden',shouldShow ? 'false' : 'true');if(!shouldShow){input.setAttribute('tabindex','-1');}else{input.removeAttribute('tabindex');}});}});}handleFontFamilyChange(dropdown,value){const googleFontWrapper=dropdown.parentNode.querySelector('.google-font-field-wrapper');if(googleFontWrapper){if(value==='google'){googleFontWrapper.style.display='';const googleFontInput=googleFontWrapper.querySelector('.google-font-input');if(googleFontInput){googleFontInput.focus();}}else{googleFontWrapper.style.display='none';}}}updateImagePreview(field,url){const preview=field.parentNode.parentNode.querySelector('.las-image-preview img');const removeButton=field.parentNode.querySelector('.las-remove-image-button');if(preview){if(url && this.validateField(field,url)){preview.src=url;preview.style.display='';if(removeButton)removeButton.style.display='';}else{preview.style.display='none';if(removeButton)removeButton.style.display='none';}}}openMediaLibrary(button){if(typeof wp==='undefined' || !wp.media){console.warn('LAS: WordPress media library not available');return;}const mediaFrame=wp.media({title: 'Select Image',button:{text: 'Use this image'},multiple: false,library:{type: 'image'}});mediaFrame.on('select',()=>{const attachment=mediaFrame.state().get('selection').first().toJSON();const field=button.parentNode.querySelector('.las-image-url-field');if(field){field.value=attachment.url;field.dispatchEvent(new Event('input',{bubbles: true}));this.updateImagePreview(field,attachment.url);}});mediaFrame.open();}removeImage(button){const field=button.parentNode.querySelector('.las-image-url-field');if(field){field.value='';field.dispatchEvent(new Event('input',{bubbles: true}));this.updateImagePreview(field,'');}}setupFormValidation(){const styles=document.createElement('style');styles.textContent=` .las-field-invalid{border-color: #dc3232 !important;box-shadow: 0 0 2px rgba(220,50,50,0.5)!important;}.las-field-error{color: #dc3232;font-size: 12px;margin-top: 4px;display: block;}.las-field-valid{border-color: #46b450 !important;}`;document.head.appendChild(styles);}setupAccessibilityFeatures(){this.boundElements.forEach((info,settingKey)=>{const element=info.element;if(!element.getAttribute('aria-label')&& !element.getAttribute('aria-labelledby')){const label=document.querySelector(`label[for="${element.id}"]`);if(label){element.setAttribute('aria-labelledby',label.id || `${element.id}-label`);if(!label.id){label.id=`${element.id}-label`;}}else{const ariaLabel=settingKey.replace(/_/g,' ').replace(/\b\w/g,l=> l.toUpperCase());element.setAttribute('aria-label',ariaLabel);}}if(element.hasAttribute('required')){element.setAttribute('aria-required','true');}});document.querySelectorAll('input,select,textarea').forEach(element=>{if(!element.getAttribute('aria-label')&& !element.getAttribute('aria-labelledby')){const label=document.querySelector(`label[for="${element.id}"]`);if(label){element.setAttribute('aria-labelledby',label.id || `${element.id}-label`);if(!label.id){label.id=`${element.id}-label`;}}else if(element.id || element.name){const key=element.id || element.name;const ariaLabel=key.replace(/_/g,' ').replace(/\b\w/g,l=> l.toUpperCase());element.setAttribute('aria-label',ariaLabel);}}});this.setupKeyboardNavigation();}setupKeyboardNavigation(){document.addEventListener('keydown',(e)=>{if((e.ctrlKey || e.metaKey)&& e.key==='s'){e.preventDefault();this.saveAllSettings();}if(e.key==='Escape'){const activeElement=document.activeElement;if(activeElement && this.boundElements.has(this.getSettingKey(activeElement))){activeElement.blur();this.clearFieldError(activeElement);}}});}saveAllSettings(){const ajaxManager=this.core.get('ajax');if(ajaxManager){const allSettings={};this.boundElements.forEach((info,settingKey)=>{const element=info.element;let value;switch(info.type){case 'toggle': value=element.checked;break;case 'slider': value=parseFloat(element.value);break;default: value=element.value;}allSettings[settingKey]=value;});ajaxManager.saveSettings(allSettings).then(()=>{const errorHandler=this.core.get('error');if(errorHandler){errorHandler.showSuccess('All settings saved successfully');}}).catch((error)=>{const errorHandler=this.core.get('error');if(errorHandler){errorHandler.showError(`Failed to save settings: ${error.message}`);}});}}cleanup(){try{console.log('LAS: Cleaning up Form Element Binder...');this.debounceTimers.forEach(timer=> clearTimeout(timer));this.debounceTimers.clear();this.errorElements.forEach(errorElement=>{if(errorElement.parentNode){errorElement.parentNode.removeChild(errorElement);}});this.errorElements.clear();this.boundElements.clear();console.log('LAS: Form Element Binder cleanup complete');}catch(error){console.error('LAS: Error during Form Element Binder cleanup:',error);}}}if(typeof module !=='undefined' && module.exports){module.exports={LASCoreManager,LASErrorHandler,LASSettingsManager,LASAjaxManager,LASLivePreviewEngine,LASFormElementBinder};}if(typeof window !=='undefined'){window.LASCoreManager=LASCoreManager;window.LASErrorHandler=LASErrorHandler;window.LASSettingsManager=LASSettingsManager;window.LASAjaxManager=LASAjaxManager;window.LASLivePreviewEngine=LASLivePreviewEngine;window.LASFormElementBinder=LASFormElementBinder;}