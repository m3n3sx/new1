(function(window,document){'use strict';class LivePreview{constructor(core){this.core=core;this.styleElements=new Map();this.debounceTimers=new Map();this.debounceDelay=300;this.cssCache=new Map();this.cacheEnabled=true;this.updateCount=0;this.lastUpdateTime=0;this.styleMap=this.initializeStyleMap();this.init();}init(){this.createStyleElements();this.setupEventListeners();this.loadInitialStyles();this.core.log('LivePreview initialized',{styleElements: this.styleElements.size,styleMapKeys: Object.keys(this.styleMap).length});}initializeStyleMap(){return{'menu.background_color':{selector: '#adminmenu,#adminmenu .wp-submenu',property: 'background-color',cssVar: '--las-menu-bg'},'menu.text_color':{selector: '#adminmenu a',property: 'color',cssVar: '--las-menu-text'},'menu.hover_color':{selector: '#adminmenu a:hover,#adminmenu li.opensub > a,#adminmenu li > a.wp-has-current-submenu',property: 'color',cssVar: '--las-menu-hover'},'menu.active_color':{selector: '#adminmenu .wp-has-current-submenu a,#adminmenu .current a',property: 'color',cssVar: '--las-menu-active'},'adminbar.background_color':{selector: '#wpadminbar',property: 'background-color',cssVar: '--las-adminbar-bg'},'adminbar.text_color':{selector: '#wpadminbar .ab-item,#wpadminbar a.ab-item',property: 'color',cssVar: '--las-adminbar-text'},'adminbar.height':{selector: '#wpadminbar',property: 'height',cssVar: '--las-adminbar-height'},'content.background_color':{selector: 'body,#wpbody-content',property: 'background-color',cssVar: '--las-content-bg'},'content.font_family':{selector: 'body,#wpbody-content',property: 'font-family',cssVar: '--las-content-font'},'content.font_size':{selector: 'body,#wpbody-content',property: 'font-size',cssVar: '--las-content-font-size'},'forms.input_background':{selector: 'input[type="text"],input[type="email"],input[type="password"],textarea,select',property: 'background-color',cssVar: '--las-input-bg'},'forms.input_border':{selector: 'input[type="text"],input[type="email"],input[type="password"],textarea,select',property: 'border-color',cssVar: '--las-input-border'},'forms.button_primary':{selector: '.button-primary',property: 'background-color',cssVar: '--las-button-primary'},'advanced.custom_css':{selector: null,property: null,cssVar: null}};}createStyleElements(){this.createStyleElement('main','las-live-preview-main');this.createStyleElement('variables','las-live-preview-vars');this.createStyleElement('custom','las-live-preview-custom');this.createStyleElement('responsive','las-live-preview-responsive');}createStyleElement(key,id){const existing=document.getElementById(id);if(existing){existing.remove();}const styleElement=document.createElement('style');styleElement.id=id;styleElement.type='text/css';document.head.appendChild(styleElement);this.styleElements.set(key,styleElement);this.core.log(`Style element created: ${key}`,{id});}setupEventListeners(){this.core.on('settings:changed',(data)=>{this.handleSettingChange(data.key,data.value,data.oldValue);});this.core.on('settings:bulk-changed',(data)=>{this.handleBulkSettingChange(data.changes);});this.core.on('settings:synced',(data)=>{this.handleSyncedChanges(data.changes);});this.core.on('theme:changed',(data)=>{this.handleThemeChange(data.theme);});this.core.on('core:ready',()=>{this.startPerformanceMonitoring();});}async loadInitialStyles(){try{const settingsManager=this.core.getModule('settings-manager');if(!settingsManager){this.core.log('SettingsManager not available,skipping initial styles');return;}const settings=settingsManager.getAll();this.generateAndApplyStyles(settings);this.core.emit('preview:initial-load',{settings});}catch(error){this.core.handleError('Failed to load initial styles',error);}}handleSettingChange(key,value,oldValue){try{this.debouncedUpdate(key,()=>{this.updateStyleForSetting(key,value);this.core.emit('preview:updated',{key,value,oldValue});});}catch(error){this.core.handleError(`Failed to handle setting change: ${key}`,error);}}handleBulkSettingChange(changes){try{this.debouncedUpdate('bulk',()=>{const settings={};Object.entries(changes).forEach(([key,change])=>{settings[key]=change.value;});this.generateAndApplyStyles(settings);this.core.emit('preview:bulk-updated',{changes});});}catch(error){this.core.handleError('Failed to handle bulk setting changes',error);}}handleSyncedChanges(changes){try{this.generateAndApplyStyles(changes);this.core.emit('preview:synced',{changes});}catch(error){this.core.handleError('Failed to handle synced changes',error);}}handleThemeChange(theme){try{this.debouncedUpdate('theme',()=>{this.applyThemeStyles(theme);this.core.emit('preview:theme-changed',{theme});});}catch(error){this.core.handleError(`Failed to handle theme change: ${theme}`,error);}}debouncedUpdate(key,callback){if(this.debounceTimers.has(key)){clearTimeout(this.debounceTimers.get(key));}const timer=setTimeout(()=>{try{callback();this.debounceTimers.delete(key);this.updatePerformanceMetrics();}catch(error){this.core.handleError(`Debounced update error for ${key}`,error);}},this.debounceDelay);this.debounceTimers.set(key,timer);}updateStyleForSetting(key,value){const styleConfig=this.styleMap[key];if(!styleConfig){if(key==='advanced.custom_css'){this.updateCustomCSS(value);}return;}const css=this.generateCSSForSetting(key,value,styleConfig);this.applyCSS('main',css,key);}generateAndApplyStyles(settings){const startTime=performance.now();try{const variablesCSS=this.generateVariablesCSS(settings);this.applyCSS('variables',variablesCSS);const mainCSS=this.generateMainCSS(settings);this.applyCSS('main',mainCSS);if(settings['advanced.custom_css']){this.updateCustomCSS(settings['advanced.custom_css']);}const responsiveCSS=this.generateResponsiveCSS(settings);this.applyCSS('responsive',responsiveCSS);const endTime=performance.now();this.core.log(`Styles generated and applied in ${endTime-startTime}ms`);}catch(error){this.core.handleError('Failed to generate and apply styles',error);}}generateVariablesCSS(settings){const cacheKey='variables-'+JSON.stringify(settings);if(this.cacheEnabled && this.cssCache.has(cacheKey)){return this.cssCache.get(cacheKey);}const variables=[];Object.entries(settings).forEach(([key,value])=>{const styleConfig=this.styleMap[key];if(styleConfig && styleConfig.cssVar){const processedValue=this.processValue(value,styleConfig.property);variables.push(` ${styleConfig.cssVar}: ${processedValue};`);}});const css=variables.length > 0 ? `:root{\n${variables.join('\n')}\n}` : '';if(this.cacheEnabled){this.cssCache.set(cacheKey,css);}return css;}generateMainCSS(settings){const cacheKey='main-'+JSON.stringify(settings);if(this.cacheEnabled && this.cssCache.has(cacheKey)){return this.cssCache.get(cacheKey);}const cssRules=[];Object.entries(settings).forEach(([key,value])=>{const css=this.generateCSSForSetting(key,value,this.styleMap[key]);if(css){cssRules.push(css);}});const css=cssRules.join('\n\n');if(this.cacheEnabled){this.cssCache.set(cacheKey,css);}return css;}generateCSSForSetting(key,value,styleConfig){if(!styleConfig || !styleConfig.selector || !styleConfig.property){return '';}const processedValue=this.processValue(value,styleConfig.property);if(!processedValue){return '';}return `${styleConfig.selector}{\n ${styleConfig.property}: ${processedValue};\n}`;}generateResponsiveCSS(settings){const responsiveRules=[];const mobileRules=[];if(settings['mobile.menu_collapse']){mobileRules.push('#adminmenu{display: none;}');}if(mobileRules.length > 0){responsiveRules.push(`@media(max-width: 782px){\n ${mobileRules.join('\n ')}\n}`);}const tabletRules=[];if(settings['tablet.sidebar_width']){tabletRules.push(`#adminmenuwrap{width: ${settings['tablet.sidebar_width']};}`);}if(tabletRules.length > 0){responsiveRules.push(`@media(min-width: 783px)and(max-width: 1024px){\n ${tabletRules.join('\n ')}\n}`);}return responsiveRules.join('\n\n');}processValue(value,property){if(!value)return '';if(property.includes('color')|| property.includes('background')){return this.processColorValue(value);}if(property.includes('width')|| property.includes('height')|| property.includes('size')){return this.processSizeValue(value);}if(property==='font-family'){return this.processFontFamily(value);}return value;}processColorValue(value){if(/^[0-9A-Fa-f]{6}$/.test(value)){return `#${value}`;}if(/^#[0-9A-Fa-f]{3,6}$/.test(value)){return value;}if(value.startsWith('rgb')){return value;}if(value.startsWith('hsl')){return value;}const cssColors=['transparent','inherit','initial','unset','currentColor'];if(cssColors.includes(value)){return value;}return value;}processSizeValue(value){if(/\d+(px|em|rem|%|vh|vw)$/.test(value)){return value;}if(/^\d+$/.test(value)){return `${value}px`;}return value;}processFontFamily(value){const fontMap={'system': '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif','arial': 'Arial,sans-serif','helvetica': 'Helvetica,Arial,sans-serif','georgia': 'Georgia,serif','times': '"Times New Roman",Times,serif'};return fontMap[value] || value;}updateCustomCSS(css){try{const sanitizedCSS=this.sanitizeCSS(css);this.applyCSS('custom',sanitizedCSS);}catch(error){this.core.handleError('Failed to update custom CSS',error);}}sanitizeCSS(css){const dangerous=[/javascript:/gi,/expression\(/gi,/@import/gi,/behavior:/gi,/-moz-binding/gi ];let sanitized=css;dangerous.forEach(pattern=>{sanitized=sanitized.replace(pattern,'');});return sanitized;}applyCSS(elementKey,css,context=''){const styleElement=this.styleElements.get(elementKey);if(!styleElement){this.core.handleError(`Style element not found: ${elementKey}`);return;}try{styleElement.textContent=css;this.core.log(`CSS applied to ${elementKey}`,{context,cssLength: css.length});}catch(error){this.core.handleError(`Failed to apply CSS to ${elementKey}`,error);}}applyThemeStyles(theme){this.core.emit('preview:theme-applied',{theme});}startPerformanceMonitoring(){setInterval(()=>{this.reportPerformanceMetrics();},10000);}updatePerformanceMetrics(){this.updateCount++;this.lastUpdateTime=Date.now();}reportPerformanceMetrics(){const metrics={updateCount: this.updateCount,lastUpdateTime: this.lastUpdateTime,cacheSize: this.cssCache.size,activeTimers: this.debounceTimers.size,styleElements: this.styleElements.size};this.core.emit('preview:performance',metrics);if(this.core.config.debug){this.core.log('LivePreview performance metrics',metrics);}}clearCache(){this.cssCache.clear();this.core.log('CSS cache cleared');}setCacheEnabled(enabled){this.cacheEnabled=enabled;if(!enabled){this.clearCache();}this.core.log(`CSS caching ${enabled ? 'enabled' : 'disabled'}`);}getPerformanceMetrics(){return{updateCount: this.updateCount,lastUpdateTime: this.lastUpdateTime,cacheSize: this.cssCache.size,cacheEnabled: this.cacheEnabled,activeTimers: this.debounceTimers.size,styleElements: this.styleElements.size,debounceDelay: this.debounceDelay};}destroy(){this.debounceTimers.forEach(timer=> clearTimeout(timer));this.debounceTimers.clear();this.styleElements.forEach(element=>{if(element.parentNode){element.parentNode.removeChild(element);}});this.styleElements.clear();this.cssCache.clear();this.core.log('LivePreview destroyed');}}if(typeof module !=='undefined' && module.exports){module.exports=LivePreview;}if(typeof define==='function' && define.amd){define([],function(){return LivePreview;});}if(window.LAS && typeof window.LAS.registerModule==='function'){window.LAS.registerModule('live-preview',LivePreview);}window.LASLivePreview=LivePreview;})(window,document);