class LASMemoryManager{constructor(core){this.core=core;this.eventListeners=new Map();this.domObservers=new Map();this.intervals=new Map();this.timeouts=new Map();this.cacheStorage=new Map();this.weakRefs=new Set();this.cleanupTasks=[];this.memoryCheckInterval=null;this.isMonitoring=false;this.thresholds={maxCacheSize: 10*1024*1024,maxEventListeners: 1000,maxDomObservers: 100,cleanupInterval: 300000,memoryWarningThreshold: 20*1024*1024};this.init=this.init.bind(this);this.addEventListener=this.addEventListener.bind(this);this.removeEventListener=this.removeEventListener.bind(this);this.addDomObserver=this.addDomObserver.bind(this);this.removeDomObserver=this.removeDomObserver.bind(this);this.cacheData=this.cacheData.bind(this);this.getCachedData=this.getCachedData.bind(this);this.clearCache=this.clearCache.bind(this);this.performCleanup=this.performCleanup.bind(this);this.detectMemoryLeaks=this.detectMemoryLeaks.bind(this);}async init(){try{console.log('LAS: Initializing Memory Manager...');this.startMemoryMonitoring();this.setupPeriodicCleanup();this.bindCoreEvents();this.isMonitoring=true;console.log('LAS: Memory Manager initialized successfully');}catch(error){console.error('LAS: Failed to initialize Memory Manager:',error);throw error;}}startMemoryMonitoring(){if(!('memory' in performance)){console.warn('LAS: Memory API not supported,using fallback monitoring');return;}this.memoryCheckInterval=setInterval(()=>{this.checkMemoryUsage();},120000);this.checkMemoryUsage();}checkMemoryUsage(){if(!('memory' in performance))return null;const memory=performance.memory;const memoryInfo={used: memory.usedJSHeapSize,total: memory.totalJSHeapSize,limit: memory.jsHeapSizeLimit,timestamp: Date.now()};if(memoryInfo.used > this.thresholds.memoryWarningThreshold){console.warn('LAS: High memory usage detected,triggering cleanup');this.performCleanup();this.core.emit('memory:warning',{memoryInfo,threshold: this.thresholds.memoryWarningThreshold});}this.core.emit('memory:status',memoryInfo);return memoryInfo;}setupPeriodicCleanup(){const cleanupInterval=setInterval(()=>{this.performCleanup();},this.thresholds.cleanupInterval);this.intervals.set('periodic-cleanup',cleanupInterval);}bindCoreEvents(){this.addEventListener(document,'visibilitychange',()=>{if(document.hidden){this.performCleanup();}});this.addEventListener(window,'beforeunload',()=>{this.cleanup();});this.core.on('settings:bulk-update',()=>{this.clearCache('settings');});this.core.on('preview:reset',()=>{this.clearCache('preview');});}addEventListener(target,type,listener,options={}){const listenerId=this.generateId('listener');const wrappedListener=(event)=>{try{listener(event);}catch(error){console.error('LAS: Event listener error:',error);this.core.emit('memory:listener-error',{listenerId,error});}};target.addEventListener(type,wrappedListener,options);this.eventListeners.set(listenerId,{target,type,listener: wrappedListener,originalListener: listener,options,timestamp: Date.now()});if(this.eventListeners.size > this.thresholds.maxEventListeners){console.warn('LAS: High number of event listeners detected,consider cleanup');this.core.emit('memory:listener-warning',{count: this.eventListeners.size,threshold: this.thresholds.maxEventListeners});}return listenerId;}removeEventListener(listenerId){const listenerInfo=this.eventListeners.get(listenerId);if(!listenerInfo){console.warn(`LAS: Event listener ${listenerId}not found`);return false;}const{target,type,listener,options}=listenerInfo;try{target.removeEventListener(type,listener,options);this.eventListeners.delete(listenerId);return true;}catch(error){console.error('LAS: Failed to remove event listener:',error);return false;}}addDomObserver(type,callback,options={}){const observerId=this.generateId('observer');let observer=null;const wrappedCallback=(...args)=>{try{callback(...args);}catch(error){console.error('LAS: DOM observer error:',error);this.core.emit('memory:observer-error',{observerId,error});}};switch(type){case 'mutation': observer=new MutationObserver(wrappedCallback);break;case 'intersection': observer=new IntersectionObserver(wrappedCallback,options);break;case 'resize': if('ResizeObserver' in window){observer=new ResizeObserver(wrappedCallback);}else{console.warn('LAS: ResizeObserver not supported');return null;}break;default: console.error(`LAS: Unknown observer type: ${type}`);return null;}if(!observer)return null;this.domObservers.set(observerId,{type,observer,callback: wrappedCallback,originalCallback: callback,options,timestamp: Date.now()});if(this.domObservers.size > this.thresholds.maxDomObservers){console.warn('LAS: High number of DOM observers detected');this.core.emit('memory:observer-warning',{count: this.domObservers.size,threshold: this.thresholds.maxDomObservers});}return{observerId,observer};}removeDomObserver(observerId){const observerInfo=this.domObservers.get(observerId);if(!observerInfo){console.warn(`LAS: DOM observer ${observerId}not found`);return false;}try{observerInfo.observer.disconnect();this.domObservers.delete(observerId);return true;}catch(error){console.error('LAS: Failed to remove DOM observer:',error);return false;}}cacheData(key,data,category='default',ttl=300000){const cacheKey=`${category}:${key}`;const cacheEntry={data,category,timestamp: Date.now(),ttl,size: this.estimateSize(data)};this.cacheStorage.set(cacheKey,cacheEntry);this.manageCacheSize();return cacheEntry;}getCachedData(key,category='default'){const cacheKey=`${category}:${key}`;const cacheEntry=this.cacheStorage.get(cacheKey);if(!cacheEntry)return null;if(Date.now()-cacheEntry.timestamp > cacheEntry.ttl){this.cacheStorage.delete(cacheKey);return null;}return cacheEntry.data;}clearCache(category=null,key=null){if(key && category){const cacheKey=`${category}:${key}`;return this.cacheStorage.delete(cacheKey);}else if(category){let cleared=0;for(const [cacheKey,entry] of this.cacheStorage){if(entry.category===category){this.cacheStorage.delete(cacheKey);cleared++;}}return cleared;}else{const size=this.cacheStorage.size;this.cacheStorage.clear();return size;}}manageCacheSize(){let totalSize=0;const entries=Array.from(this.cacheStorage.entries());for(const [key,entry] of entries){totalSize+=entry.size || 0;}if(totalSize > this.thresholds.maxCacheSize){const sortedEntries=entries.sort((a,b)=> a[1].timestamp-b[1].timestamp);while(totalSize > this.thresholds.maxCacheSize*0.8 && sortedEntries.length > 0){const [key,entry]=sortedEntries.shift();this.cacheStorage.delete(key);totalSize-=entry.size || 0;}console.log(`LAS: Cache cleanup completed,removed ${entries.length-sortedEntries.length}entries`);}}estimateSize(obj){try{const jsonString=JSON.stringify(obj);return jsonString.length*2;}catch(error){return 1024;}}setTimeout(callback,delay){const timeoutId=this.generateId('timeout');const wrappedCallback=()=>{try{callback();}catch(error){console.error('LAS: Timeout callback error:',error);}finally{this.timeouts.delete(timeoutId);}};const nativeTimeoutId=setTimeout(wrappedCallback,delay);this.timeouts.set(timeoutId,{nativeId: nativeTimeoutId,callback: wrappedCallback,originalCallback: callback,delay,timestamp: Date.now()});return timeoutId;}clearTimeout(timeoutId){const timeoutInfo=this.timeouts.get(timeoutId);if(!timeoutInfo)return false;clearTimeout(timeoutInfo.nativeId);this.timeouts.delete(timeoutId);return true;}setInterval(callback,delay){const intervalId=this.generateId('interval');const wrappedCallback=()=>{try{callback();}catch(error){console.error('LAS: Interval callback error:',error);}};const nativeIntervalId=setInterval(wrappedCallback,delay);this.intervals.set(intervalId,{nativeId: nativeIntervalId,callback: wrappedCallback,originalCallback: callback,delay,timestamp: Date.now()});return intervalId;}clearInterval(intervalId){const intervalInfo=this.intervals.get(intervalId);if(!intervalInfo)return false;clearInterval(intervalInfo.nativeId);this.intervals.delete(intervalId);return true;}addCleanupTask(task,description='Unknown task'){const taskId=this.generateId('cleanup');this.cleanupTasks.push({id: taskId,task,description,timestamp: Date.now()});return taskId;}removeCleanupTask(taskId){const index=this.cleanupTasks.findIndex(task=> task.id===taskId);if(index !==-1){this.cleanupTasks.splice(index,1);return true;}return false;}performCleanup(){console.log('LAS: Performing memory cleanup...');const startTime=performance.now();let cleanedItems=0;try{const expiredCache=[];const now=Date.now();for(const [key,entry] of this.cacheStorage){if(now-entry.timestamp > entry.ttl){expiredCache.push(key);}}expiredCache.forEach(key=>{this.cacheStorage.delete(key);cleanedItems++;});const oldListeners=[];for(const [id,listener] of this.eventListeners){if(now-listener.timestamp > 3600000){oldListeners.push(id);}}oldListeners.forEach(id=>{this.removeEventListener(id);cleanedItems++;});const oldObservers=[];for(const [id,observer] of this.domObservers){if(now-observer.timestamp > 3600000){oldObservers.push(id);}}oldObservers.forEach(id=>{this.removeDomObserver(id);cleanedItems++;});this.cleanupTasks.forEach(({task,description})=>{try{task();cleanedItems++;}catch(error){console.error(`LAS: Cleanup task failed(${description}):`,error);}});if(window.gc && typeof window.gc==='function'){window.gc();}const duration=performance.now()-startTime;console.log(`LAS: Memory cleanup completed in ${duration.toFixed(2)}ms,cleaned ${cleanedItems}items`);this.core.emit('memory:cleanup',{duration,cleanedItems,timestamp: Date.now()});}catch(error){console.error('LAS: Memory cleanup failed:',error);this.core.emit('memory:cleanup-error',error);}}detectMemoryLeaks(){const leaks=[];const now=Date.now();if(this.eventListeners.size > this.thresholds.maxEventListeners*0.8){leaks.push({type: 'event-listeners',count: this.eventListeners.size,threshold: this.thresholds.maxEventListeners,severity: 'warning'});}if(this.domObservers.size > this.thresholds.maxDomObservers*0.8){leaks.push({type: 'dom-observers',count: this.domObservers.size,threshold: this.thresholds.maxDomObservers,severity: 'warning'});}const oldTimeouts=Array.from(this.timeouts.values()).filter(timeout=> now-timeout.timestamp > 300000);if(oldTimeouts.length > 10){leaks.push({type: 'old-timeouts',count: oldTimeouts.length,severity: 'warning'});}let totalCacheSize=0;for(const entry of this.cacheStorage.values()){totalCacheSize+=entry.size || 0;}if(totalCacheSize > this.thresholds.maxCacheSize*0.8){leaks.push({type: 'cache-size',size: totalCacheSize,threshold: this.thresholds.maxCacheSize,severity: 'warning'});}if(leaks.length > 0){this.core.emit('memory:leaks-detected',leaks);console.warn('LAS: Potential memory leaks detected:',leaks);}return leaks;}generateId(prefix='id'){return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;}getMemoryStats(){const stats={eventListeners: this.eventListeners.size,domObservers: this.domObservers.size,intervals: this.intervals.size,timeouts: this.timeouts.size,cacheEntries: this.cacheStorage.size,cleanupTasks: this.cleanupTasks.length};let totalCacheSize=0;for(const entry of this.cacheStorage.values()){totalCacheSize+=entry.size || 0;}stats.cacheSize=totalCacheSize;if('memory' in performance){const memory=performance.memory;stats.jsHeapSize={used: memory.usedJSHeapSize,total: memory.totalJSHeapSize,limit: memory.jsHeapSizeLimit};}return stats;}setThresholds(newThresholds){this.thresholds={...this.thresholds,...newThresholds};this.core.emit('memory:thresholds-updated',this.thresholds);}getThresholds(){return{...this.thresholds};}cleanup(){console.log('LAS: Cleaning up Memory Manager...');this.isMonitoring=false;if(this.memoryCheckInterval){clearInterval(this.memoryCheckInterval);this.memoryCheckInterval=null;}for(const [id,timeoutInfo] of this.timeouts){clearTimeout(timeoutInfo.nativeId);}this.timeouts.clear();for(const [id,intervalInfo] of this.intervals){clearInterval(intervalInfo.nativeId);}this.intervals.clear();for(const [id,listenerInfo] of this.eventListeners){const{target,type,listener,options}=listenerInfo;try{target.removeEventListener(type,listener,options);}catch(error){console.warn('LAS: Failed to remove event listener during cleanup:',error);}}this.eventListeners.clear();for(const [id,observerInfo] of this.domObservers){try{observerInfo.observer.disconnect();}catch(error){console.warn('LAS: Failed to disconnect DOM observer during cleanup:',error);}}this.domObservers.clear();this.cacheStorage.clear();this.cleanupTasks=[];this.weakRefs.clear();console.log('LAS: Memory Manager cleanup complete');}}if(typeof module !=='undefined' && module.exports){module.exports=LASMemoryManager;}else if(typeof window !=='undefined'){window.LASMemoryManager=LASMemoryManager;}else{global.LASMemoryManager=LASMemoryManager;}