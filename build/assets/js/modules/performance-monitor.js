class LASPerformanceMonitor{constructor(core){this.core=core;this.metrics=new Map();this.thresholds={ajaxRequest: 5000,domUpdate: 100,memoryUsage: 25*1024*1024,cssGeneration: 50,settingsUpdate: 300};this.alerts=[];this.isMonitoring=false;this.performanceObserver=null;this.memoryCheckInterval=null;this.init=this.init.bind(this);this.startTiming=this.startTiming.bind(this);this.endTiming=this.endTiming.bind(this);this.recordMetric=this.recordMetric.bind(this);this.checkMemoryUsage=this.checkMemoryUsage.bind(this);this.generateReport=this.generateReport.bind(this);}async init(){try{console.log('LAS: Initializing Performance Monitor...');this.setupPerformanceObserver();this.startMemoryMonitoring();this.bindEventListeners();this.isMonitoring=true;this.recordMetric('initialization',{timestamp: Date.now(),duration: performance.now(),type: 'system'});console.log('LAS: Performance Monitor initialized successfully');}catch(error){console.error('LAS: Failed to initialize Performance Monitor:',error);throw error;}}setupPerformanceObserver(){if(!('PerformanceObserver' in window)){console.warn('LAS: PerformanceObserver not supported,using fallback timing');return;}try{this.performanceObserver=new PerformanceObserver((list)=>{const entries=list.getEntries();entries.forEach(entry=>{this.processPerformanceEntry(entry);});});const observeTypes=['measure','navigation','resource'];observeTypes.forEach(type=>{try{this.performanceObserver.observe({entryTypes: [type]});}catch(e){console.warn(`LAS: Cannot observe ${type}performance entries:`,e);}});}catch(error){console.warn('LAS: Failed to setup PerformanceObserver:',error);}}processPerformanceEntry(entry){if(entry.name && entry.name.includes('las-')){this.recordMetric(entry.name,{duration: entry.duration,startTime: entry.startTime,timestamp: Date.now(),type: 'performance-api'});this.checkThreshold(entry.name,entry.duration);}}startMemoryMonitoring(){if(!('memory' in performance)){console.warn('LAS: Memory API not supported');return;}this.memoryCheckInterval=setInterval(()=>{this.checkMemoryUsage();},30000);this.checkMemoryUsage();}checkMemoryUsage(){if(!('memory' in performance))return null;const memory=performance.memory;const memoryInfo={used: memory.usedJSHeapSize,total: memory.totalJSHeapSize,limit: memory.jsHeapSizeLimit,timestamp: Date.now()};this.recordMetric('memory-usage',memoryInfo);if(memoryInfo.used > this.thresholds.memoryUsage){this.triggerAlert('memory',{message: `Memory usage exceeded threshold: ${this.formatBytes(memoryInfo.used)}`,current: memoryInfo.used,threshold: this.thresholds.memoryUsage,severity: 'warning'});}return memoryInfo;}bindEventListeners(){this.core.on('ajax:start',(data)=>{this.startTiming(`ajax-${data.requestId}`,'ajax');});this.core.on('ajax:complete',(data)=>{this.endTiming(`ajax-${data.requestId}`,{success: data.success,responseSize: data.responseSize || 0});});this.core.on('preview:update-start',(data)=>{this.startTiming(`dom-update-${data.updateId}`,'dom');});this.core.on('preview:update-complete',(data)=>{this.endTiming(`dom-update-${data.updateId}`,{elementsUpdated: data.elementsUpdated || 0,cssRules: data.cssRules || 0});});this.core.on('settings:update-start',(data)=>{this.startTiming(`settings-${data.key}`,'settings');});this.core.on('settings:update-complete',(data)=>{this.endTiming(`settings-${data.key}`,{key: data.key,value: data.value});});this.core.on('css:generation-start',(data)=>{this.startTiming(`css-gen-${data.generationId}`,'css');});this.core.on('css:generation-complete',(data)=>{this.endTiming(`css-gen-${data.generationId}`,{rulesGenerated: data.rulesGenerated || 0,cssLength: data.cssLength || 0});});}startTiming(name,category='general',metadata={}){const timingData={name,category,startTime: performance.now(),startTimestamp: Date.now(),metadata};this.metrics.set(`timing-${name}`,timingData);if('mark' in performance){try{performance.mark(`las-${name}-start`);}catch(e){}}return timingData;}endTiming(name,additionalData={}){const timingKey=`timing-${name}`;const startData=this.metrics.get(timingKey);if(!startData){console.warn(`LAS: No start timing found for ${name}`);return null;}const endTime=performance.now();const duration=endTime-startData.startTime;const completedTiming={...startData,endTime,endTimestamp: Date.now(),duration,...additionalData};this.recordMetric(name,completedTiming);if('mark' in performance && 'measure' in performance){try{performance.mark(`las-${name}-end`);performance.measure(`las-${name}`,`las-${name}-start`,`las-${name}-end`);}catch(e){}}this.checkThreshold(name,duration,startData.category);this.metrics.delete(timingKey);return completedTiming;}recordMetric(name,data){const metricKey=`metric-${name}-${Date.now()}`;const metric={name,timestamp: Date.now(),...data};this.metrics.set(metricKey,metric);this.core.emit('performance:metric',{name,data: metric});if(this.metrics.size > 1000){const oldestKeys=Array.from(this.metrics.keys()).filter(key=> key.startsWith('metric-')).sort().slice(0,this.metrics.size-1000);oldestKeys.forEach(key=> this.metrics.delete(key));}return metric;}checkThreshold(name,value,category=null){let threshold=null;if(name.includes('ajax')|| category==='ajax'){threshold=this.thresholds.ajaxRequest;}else if(name.includes('dom')|| category==='dom'){threshold=this.thresholds.domUpdate;}else if(name.includes('css')|| category==='css'){threshold=this.thresholds.cssGeneration;}else if(name.includes('settings')|| category==='settings'){threshold=this.thresholds.settingsUpdate;}if(threshold && value > threshold){this.triggerAlert('performance',{message: `${name}exceeded threshold: ${value.toFixed(2)}ms`,metric: name,value,threshold,severity: value > threshold*2 ? 'error' : 'warning'});}}triggerAlert(type,alertData){const alert={id: `alert-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,type,timestamp: Date.now(),...alertData};this.alerts.push(alert);this.core.emit('performance:alert',alert);if(alert.severity==='error'){const errorHandler=this.core.get('error');if(errorHandler){errorHandler.showWarning(`Performance Issue: ${alert.message}`);}}const logLevel=alert.severity==='error' ? 'error' : 'warn';console[logLevel]('LAS Performance Alert:',alert);if(this.alerts.length > 100){this.alerts=this.alerts.slice(-100);}return alert;}getMetrics(category=null,limit=100){const allMetrics=Array.from(this.metrics.entries()).filter(([key])=> key.startsWith('metric-')).map(([key,value])=> value).sort((a,b)=> b.timestamp-a.timestamp);let filteredMetrics=allMetrics;if(category){filteredMetrics=allMetrics.filter(metric=> metric.category===category || metric.name.includes(category));}return filteredMetrics.slice(0,limit);}getAlerts(type=null,limit=50){let filteredAlerts=this.alerts;if(type){filteredAlerts=this.alerts.filter(alert=> alert.type===type);}return filteredAlerts .sort((a,b)=> b.timestamp-a.timestamp).slice(0,limit);}generateReport(options={}){const{includeMetrics=true,includeAlerts=true,includeMemory=true,timePeriod=3600000}=options;const now=Date.now();const cutoffTime=now-timePeriod;const report={timestamp: now,timePeriod,summary:{totalMetrics: 0,totalAlerts: 0,memoryUsage: null,averageResponseTime: 0,slowestOperations: []}};if(includeMetrics){const recentMetrics=this.getMetrics(null,1000).filter(metric=> metric.timestamp > cutoffTime);report.metrics=recentMetrics;report.summary.totalMetrics=recentMetrics.length;const ajaxMetrics=recentMetrics.filter(m=> m.name.includes('ajax')&& m.duration);if(ajaxMetrics.length > 0){report.summary.averageResponseTime=ajaxMetrics.reduce((sum,m)=> sum+m.duration,0)/ajaxMetrics.length;}const timedMetrics=recentMetrics.filter(m=> m.duration).sort((a,b)=> b.duration-a.duration);report.summary.slowestOperations=timedMetrics.slice(0,10);}if(includeAlerts){const recentAlerts=this.getAlerts(null,100).filter(alert=> alert.timestamp > cutoffTime);report.alerts=recentAlerts;report.summary.totalAlerts=recentAlerts.length;}if(includeMemory){report.summary.memoryUsage=this.checkMemoryUsage();}return report;}cleanup(maxAge=3600000){const cutoffTime=Date.now()-maxAge;const metricsToDelete=[];for(const [key,value] of this.metrics){if(key.startsWith('metric-')&& value.timestamp < cutoffTime){metricsToDelete.push(key);}}metricsToDelete.forEach(key=> this.metrics.delete(key));this.alerts=this.alerts.filter(alert=> alert.timestamp > cutoffTime);console.log(`LAS: Cleaned up ${metricsToDelete.length}old metrics and ${this.alerts.length}alerts`);}formatBytes(bytes){if(bytes===0)return '0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];}setThresholds(newThresholds){this.thresholds={...this.thresholds,...newThresholds};this.core.emit('performance:thresholds-updated',this.thresholds);}getThresholds(){return{...this.thresholds};}cleanup(){console.log('LAS: Cleaning up Performance Monitor...');this.isMonitoring=false;if(this.memoryCheckInterval){clearInterval(this.memoryCheckInterval);this.memoryCheckInterval=null;}if(this.performanceObserver){this.performanceObserver.disconnect();this.performanceObserver=null;}this.metrics.clear();this.alerts=[];console.log('LAS: Performance Monitor cleanup complete');}}if(typeof module !=='undefined' && module.exports){module.exports=LASPerformanceMonitor;}else if(typeof window !=='undefined'){window.LASPerformanceMonitor=LASPerformanceMonitor;}else{global.LASPerformanceMonitor=LASPerformanceMonitor;}