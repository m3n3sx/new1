(function(window,document){'use strict';class TabSync{constructor(core,options={}){this.core=core;this.options={channelName: 'las-tab-sync',storageKey: 'las-tab-sync-fallback',heartbeatInterval: 5000,tabTimeout: 15000,enableConflictResolution: true,enableLeaderElection: true,...options};this.tabId=this.generateTabId();this.isLeader=false;this.lastHeartbeat=Date.now();this.broadcastChannel=null;this.usesBroadcastChannel=false;this.usesStorageEvents=false;this.activeTabs=new Map();this.tabRegistry=new Map();this.messageQueue=[];this.maxQueueSize=100;this.conflictResolver=null;this.pendingConflicts=new Map();this.handleBroadcastMessage=this.handleBroadcastMessage.bind(this);this.handleStorageEvent=this.handleStorageEvent.bind(this);this.handleVisibilityChange=this.handleVisibilityChange.bind(this);this.handleBeforeUnload=this.handleBeforeUnload.bind(this);this.heartbeatTimer=null;this.cleanupTimer=null;this.init();}init(){this.setupCommunicationChannel();this.setupEventListeners();this.startHeartbeat();this.registerTab();if(this.options.enableLeaderElection){this.electLeader();}this.core.log('TabSync initialized',{tabId: this.tabId,usesBroadcastChannel: this.usesBroadcastChannel,usesStorageEvents: this.usesStorageEvents});}setupCommunicationChannel(){if(window.BroadcastChannel){try{this.broadcastChannel=new BroadcastChannel(this.options.channelName);this.broadcastChannel.addEventListener('message',this.handleBroadcastMessage);this.usesBroadcastChannel=true;this.core.log('BroadcastChannel initialized for tab sync');return;}catch(error){this.core.handleError('Failed to initialize BroadcastChannel',error);}}this.setupStorageEventFallback();}setupStorageEventFallback(){window.addEventListener('storage',this.handleStorageEvent);this.usesStorageEvents=true;this.core.log('Storage event fallback initialized for tab sync');}setupEventListeners(){this.core.on('settings:changed',(data)=>{this.broadcastMessage('settings-changed',{key: data.key,value: data.value,oldValue: data.oldValue});});this.core.on('settings:bulk-changed',(data)=>{this.broadcastMessage('settings-bulk-changed',{changes: data.changes});});this.core.on('auto-save:saved',(data)=>{this.broadcastMessage('auto-save-completed',{state: data.state,timestamp: data.timestamp});});this.core.on('live-edit:activated',()=>{this.broadcastMessage('live-edit-activated',{tabId: this.tabId});});this.core.on('live-edit:deactivated',()=>{this.broadcastMessage('live-edit-deactivated',{tabId: this.tabId});});document.addEventListener('visibilitychange',this.handleVisibilityChange);window.addEventListener('beforeunload',this.handleBeforeUnload);}generateTabId(){return `tab-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;}registerTab(){const tabInfo={id: this.tabId,url: window.location.href,title: document.title,userAgent: navigator.userAgent,timestamp: Date.now(),isActive: !document.hidden,isLeader: this.isLeader};this.tabRegistry.set(this.tabId,tabInfo);this.activeTabs.set(this.tabId,Date.now());this.broadcastMessage('tab-registered',tabInfo);this.core.emit('tab-sync:tab-registered',tabInfo);}unregisterTab(){this.broadcastMessage('tab-unregistered',{tabId: this.tabId});this.tabRegistry.delete(this.tabId);this.activeTabs.delete(this.tabId);this.core.emit('tab-sync:tab-unregistered',{tabId: this.tabId});}startHeartbeat(){this.heartbeatTimer=setInterval(()=>{this.sendHeartbeat();this.cleanupInactiveTabs();},this.options.heartbeatInterval);}sendHeartbeat(){this.lastHeartbeat=Date.now();this.broadcastMessage('heartbeat',{tabId: this.tabId,timestamp: this.lastHeartbeat,isActive: !document.hidden,isLeader: this.isLeader});if(this.tabRegistry.has(this.tabId)){const tabInfo=this.tabRegistry.get(this.tabId);tabInfo.timestamp=this.lastHeartbeat;tabInfo.isActive=!document.hidden;tabInfo.isLeader=this.isLeader;}}cleanupInactiveTabs(){const now=Date.now();const timeout=this.options.tabTimeout;for(const [tabId,lastSeen] of this.activeTabs.entries()){if(now-lastSeen > timeout && tabId !==this.tabId){this.activeTabs.delete(tabId);this.tabRegistry.delete(tabId);this.core.emit('tab-sync:tab-timeout',{tabId});if(this.options.enableLeaderElection){const timedOutTab=this.tabRegistry.get(tabId);if(timedOutTab && timedOutTab.isLeader){this.electLeader();}}}}}electLeader(){let oldestTab=null;let oldestTimestamp=Infinity;for(const [tabId,tabInfo] of this.tabRegistry.entries()){if(this.activeTabs.has(tabId)&& tabInfo.timestamp < oldestTimestamp){oldestTab=tabId;oldestTimestamp=tabInfo.timestamp;}}const wasLeader=this.isLeader;this.isLeader=(oldestTab===this.tabId);if(this.isLeader && !wasLeader){this.broadcastMessage('leader-elected',{tabId: this.tabId});this.core.emit('tab-sync:leader-elected',{tabId: this.tabId});this.core.log('Tab elected as leader',{tabId: this.tabId});}else if(!this.isLeader && wasLeader){this.core.emit('tab-sync:leader-changed',{newLeader: oldestTab});this.core.log('Leadership transferred',{newLeader: oldestTab});}}broadcastMessage(type,data={}){const message={type: type,data: data,source: this.tabId,timestamp: Date.now()};if(this.usesBroadcastChannel){try{this.broadcastChannel.postMessage(message);}catch(error){this.core.handleError('Failed to broadcast message',error);this.broadcastViaStorage(message);}}else if(this.usesStorageEvents){this.broadcastViaStorage(message);}this.addToMessageQueue(message);}broadcastViaStorage(message){try{const key=`${this.options.storageKey}-${Date.now()}-${Math.random()}`;localStorage.setItem(key,JSON.stringify(message));setTimeout(()=>{localStorage.removeItem(key);},100);}catch(error){this.core.handleError('Failed to broadcast via storage',error);}}addToMessageQueue(message){this.messageQueue.push(message);if(this.messageQueue.length > this.maxQueueSize){this.messageQueue=this.messageQueue.slice(-this.maxQueueSize);}}handleBroadcastMessage(event){const message=event.data;this.processMessage(message);}handleStorageEvent(event){if(!event.key || !event.key.startsWith(this.options.storageKey)){return;}try{const message=JSON.parse(event.newValue);this.processMessage(message);}catch(error){this.core.handleError('Failed to parse storage sync message',error);}}processMessage(message){if(message.source===this.tabId){return;}this.updateTabRegistry(message);switch(message.type){case 'settings-changed': this.handleSettingsChanged(message);break;case 'settings-bulk-changed': this.handleSettingsBulkChanged(message);break;case 'auto-save-completed': this.handleAutoSaveCompleted(message);break;case 'live-edit-activated': this.handleLiveEditActivated(message);break;case 'live-edit-deactivated': this.handleLiveEditDeactivated(message);break;case 'tab-registered': this.handleTabRegistered(message);break;case 'tab-unregistered': this.handleTabUnregistered(message);break;case 'heartbeat': this.handleHeartbeat(message);break;case 'leader-elected': this.handleLeaderElected(message);break;case 'conflict-resolution': this.handleConflictResolution(message);break;default: this.core.log('Unknown message type received',{type: message.type});}this.core.emit('tab-sync:message-received',message);}updateTabRegistry(message){const tabId=message.source;this.activeTabs.set(tabId,message.timestamp);if(message.data && message.data.tabId===tabId){const existingInfo=this.tabRegistry.get(tabId)||{};const updatedInfo={...existingInfo,id: tabId,timestamp: message.timestamp,...message.data};this.tabRegistry.set(tabId,updatedInfo);}}handleSettingsChanged(message){const{key,value,oldValue}=message.data;if(this.options.enableConflictResolution){const conflict=this.detectConflict('setting',key,value,oldValue);if(conflict){this.handleConflict(conflict,message);return;}}const settingsManager=this.core.getModule('settings-manager');if(settingsManager){settingsManager.set(key,value,true);}this.core.emit('tab-sync:settings-synced',{key: key,value: value,source: message.source});}handleSettingsBulkChanged(message){const{changes}=message.data;const settingsManager=this.core.getModule('settings-manager');if(settingsManager){const settings={};Object.entries(changes).forEach(([key,change])=>{settings[key]=change.value || change;});settingsManager.setMultiple(settings,true);}this.core.emit('tab-sync:settings-bulk-synced',{changes: changes,source: message.source});}handleAutoSaveCompleted(message){const{state,timestamp}=message.data;this.core.emit('tab-sync:auto-save-synced',{state: state,timestamp: timestamp,source: message.source});}handleLiveEditActivated(message){this.core.emit('tab-sync:live-edit-activated',{tabId: message.data.tabId,source: message.source});}handleLiveEditDeactivated(message){this.core.emit('tab-sync:live-edit-deactivated',{tabId: message.data.tabId,source: message.source});}handleTabRegistered(message){const tabInfo=message.data;this.tabRegistry.set(tabInfo.id,tabInfo);this.activeTabs.set(tabInfo.id,message.timestamp);if(this.options.enableLeaderElection){this.electLeader();}this.core.emit('tab-sync:tab-registered',tabInfo);}handleTabUnregistered(message){const{tabId}=message.data;this.tabRegistry.delete(tabId);this.activeTabs.delete(tabId);if(this.options.enableLeaderElection){const tabInfo=this.tabRegistry.get(tabId);if(tabInfo && tabInfo.isLeader){this.electLeader();}}this.core.emit('tab-sync:tab-unregistered',{tabId});}handleHeartbeat(message){const{tabId,timestamp,isActive,isLeader}=message.data;this.activeTabs.set(tabId,timestamp);if(this.tabRegistry.has(tabId)){const tabInfo=this.tabRegistry.get(tabId);tabInfo.timestamp=timestamp;tabInfo.isActive=isActive;tabInfo.isLeader=isLeader;}}handleLeaderElected(message){const{tabId}=message.data;for(const [id,tabInfo] of this.tabRegistry.entries()){tabInfo.isLeader=(id===tabId);}this.core.emit('tab-sync:leader-changed',{newLeader: tabId});}detectConflict(type,key,value,oldValue){const settingsManager=this.core.getModule('settings-manager');if(settingsManager && type==='setting'){const currentValue=settingsManager.get(key);if(currentValue !==undefined && currentValue !==value && currentValue !==oldValue){return{type: type,key: key,localValue: currentValue,remoteValue: value,remoteOldValue: oldValue};}}return null;}handleConflict(conflict,message){const conflictId=`${conflict.type}:${conflict.key}:${Date.now()}`;this.pendingConflicts.set(conflictId,{conflict: conflict,message: message,timestamp: Date.now()});this.core.emit('tab-sync:conflict-detected',{conflictId: conflictId,conflict: conflict,source: message.source});if(this.isLeader){this.resolveConflict(conflictId,'leader-wins');}}resolveConflict(conflictId,strategy){const conflictData=this.pendingConflicts.get(conflictId);if(!conflictData){return;}const{conflict,message}=conflictData;let resolvedValue;switch(strategy){case 'local-wins': resolvedValue=conflict.localValue;break;case 'remote-wins': resolvedValue=conflict.remoteValue;break;case 'leader-wins': resolvedValue=this.isLeader ? conflict.localValue : conflict.remoteValue;break;case 'timestamp-wins': resolvedValue=message.timestamp > Date.now()-1000 ? conflict.remoteValue : conflict.localValue;break;default: resolvedValue=conflict.remoteValue;}const settingsManager=this.core.getModule('settings-manager');if(settingsManager && conflict.type==='setting'){settingsManager.set(conflict.key,resolvedValue,true);}this.broadcastMessage('conflict-resolution',{conflictId: conflictId,strategy: strategy,resolvedValue: resolvedValue});this.pendingConflicts.delete(conflictId);this.core.emit('tab-sync:conflict-resolved',{conflictId: conflictId,strategy: strategy,resolvedValue: resolvedValue});}handleConflictResolution(message){const{conflictId,strategy,resolvedValue}=message.data;if(this.pendingConflicts.has(conflictId)){const conflictData=this.pendingConflicts.get(conflictId);const{conflict}=conflictData;const settingsManager=this.core.getModule('settings-manager');if(settingsManager && conflict.type==='setting'){settingsManager.set(conflict.key,resolvedValue,true);}this.pendingConflicts.delete(conflictId);this.core.emit('tab-sync:conflict-resolved',{conflictId: conflictId,strategy: strategy,resolvedValue: resolvedValue,source: message.source});}}handleVisibilityChange(){const isActive=!document.hidden;if(this.tabRegistry.has(this.tabId)){this.tabRegistry.get(this.tabId).isActive=isActive;}if(isActive){this.sendHeartbeat();}}handleBeforeUnload(){this.unregisterTab();}getActiveTabs(){return Array.from(this.tabRegistry.values()).filter(tab=> this.activeTabs.has(tab.id));}getLeaderTab(){return Array.from(this.tabRegistry.values()).find(tab=> tab.isLeader)|| null;}isTabLeader(){return this.isLeader;}getSyncStatus(){return{tabId: this.tabId,isLeader: this.isLeader,activeTabs: this.activeTabs.size,usesBroadcastChannel: this.usesBroadcastChannel,usesStorageEvents: this.usesStorageEvents,pendingConflicts: this.pendingConflicts.size,messageQueueSize: this.messageQueue.length,lastHeartbeat: this.lastHeartbeat};}destroy(){this.unregisterTab();if(this.heartbeatTimer){clearInterval(this.heartbeatTimer);}if(this.cleanupTimer){clearInterval(this.cleanupTimer);}if(this.broadcastChannel){this.broadcastChannel.close();}window.removeEventListener('storage',this.handleStorageEvent);document.removeEventListener('visibilitychange',this.handleVisibilityChange);window.removeEventListener('beforeunload',this.handleBeforeUnload);this.activeTabs.clear();this.tabRegistry.clear();this.pendingConflicts.clear();this.messageQueue=[];this.core.log('TabSync destroyed');}}if(typeof module !=='undefined' && module.exports){module.exports=TabSync;}if(typeof define==='function' && define.amd){define([],function(){return TabSync;});}if(window.LAS && typeof window.LAS.registerModule==='function'){window.LAS.registerModule('tab-sync',TabSync);}window.LASTabSync=TabSync;})(window,document);