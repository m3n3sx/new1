export default class TemplateManager{constructor(core){this.core=core;this.ajaxManager=null;this.settingsManager=null;this.livePreview=null;this.templates=new Map();this.currentTemplate=null;this.previewMode=false;this.init();}async init(){try{this.ajaxManager=await this.core.getModule('ajax-manager');this.settingsManager=await this.core.getModule('settings-manager');this.livePreview=await this.core.getModule('live-preview');await this.loadTemplates();this.setupEventListeners();this.core.emit('template-manager:ready');}catch(error){console.error('TemplateManager initialization failed:',error);this.core.emit('template-manager:error',{error});}}async loadTemplates(){try{const response=await this.ajaxManager.request('get_templates',{});if(response.success){if(response.data.built_in){Object.entries(response.data.built_in).forEach(([id,template])=>{this.templates.set(id,{...template,id,type: 'built-in'});});}if(response.data.custom){Object.entries(response.data.custom).forEach(([id,template])=>{this.templates.set(id,{...template,id,type: 'custom'});});}this.core.emit('templates:loaded',{count: this.templates.size});}}catch(error){console.error('Failed to load templates:',error);throw error;}}getTemplates(){return this.templates;}getTemplate(templateId){return this.templates.get(templateId)|| null;}getTemplatesByCategory(category){const templates=[];this.templates.forEach((template)=>{if(template.category===category){templates.push(template);}});return templates;}searchTemplates(query='',category=''){const results=[];this.templates.forEach((template)=>{let match=true;if(category && template.category !==category){match=false;}if(query){const searchable=(template.name+' '+template.description).toLowerCase();if(!searchable.includes(query.toLowerCase())){match=false;}}if(match){results.push(template);}});return results;}getCategories(){const categories={};this.templates.forEach((template)=>{const category=template.category;if(!categories[category]){categories[category]={name: category.charAt(0).toUpperCase()+category.slice(1),count: 0};}categories[category].count++;});return categories;}async previewTemplate(templateId){const template=this.getTemplate(templateId);if(!template){throw new Error(`Template not found: ${templateId}`);}try{this.previewMode=true;this.currentTemplate=templateId;this.previewBackup=await this.settingsManager.getAllSettings();await this.applyTemplateSettings(template.settings,true);this.core.emit('template:preview-started',{templateId,template});return true;}catch(error){console.error('Template preview failed:',error);this.exitPreview();throw error;}}async exitPreview(){if(!this.previewMode){return;}try{if(this.previewBackup){await this.applyTemplateSettings(this.previewBackup,true);this.previewBackup=null;}this.previewMode=false;this.currentTemplate=null;this.core.emit('template:preview-ended');}catch(error){console.error('Failed to exit template preview:',error);}}async applyTemplate(templateId,options={}){const template=this.getTemplate(templateId);if(!template){throw new Error(`Template not found: ${templateId}`);}try{if(this.previewMode){await this.exitPreview();}await this.applyTemplateSettings(template.settings,false);await this.settingsManager.set('active_template',templateId);this.core.emit('template:applied',{templateId,template,options});return true;}catch(error){console.error('Template application failed:',error);throw error;}}async applyTemplateSettings(settings,preview=false){const promises=[];Object.entries(settings).forEach(([section,sectionSettings])=>{Object.entries(sectionSettings).forEach(([key,value])=>{const settingKey=`${section}.${key}`;promises.push(this.settingsManager.set(settingKey,value,{preview,skipSave: preview}));});});await Promise.all(promises);if(this.livePreview){this.livePreview.updateAll();}}async createCustomTemplate(templateData){try{this.validateTemplateData(templateData);if(!templateData.settings){templateData.settings=await this.settingsManager.getAllSettings();}templateData.type='custom';templateData.created_at=new Date().toISOString();templateData.category=templateData.category || 'custom';const response=await this.ajaxManager.request('create_custom_template',{template_data: templateData});if(response.success){const templateId=response.data.template_id;this.templates.set(templateId,{...templateData,id: templateId});this.core.emit('template:created',{templateId,template: templateData});return templateId;}else{throw new Error(response.data.message || 'Failed to create template');}}catch(error){console.error('Custom template creation failed:',error);throw error;}}async deleteCustomTemplate(templateId){const template=this.getTemplate(templateId);if(!template){throw new Error(`Template not found: ${templateId}`);}if(template.type !=='custom'){throw new Error('Cannot delete built-in template');}try{const response=await this.ajaxManager.request('delete_custom_template',{template_id: templateId});if(response.success){this.templates.delete(templateId);this.core.emit('template:deleted',{templateId});return true;}else{throw new Error(response.data.message || 'Failed to delete template');}}catch(error){console.error('Template deletion failed:',error);throw error;}}exportTemplate(templateId){const template=this.getTemplate(templateId);if(!template){throw new Error(`Template not found: ${templateId}`);}const exportData={name: template.name,description: template.description,category: template.category,settings: template.settings,version: '2.0.0',exported_at: new Date().toISOString()};this.core.emit('template:exported',{templateId,exportData});return exportData;}async importTemplate(templateData){try{const templateId=await this.importTemplateViaAjax(templateData);this.core.emit('template:imported',{templateId,templateData});return templateId;}catch(error){console.error('Template import failed:',error);throw error;}}validateTemplateData(templateData){if(!templateData.name || typeof templateData.name !=='string'){throw new Error('Template name is required and must be a string');}if(templateData.name.length > 100){throw new Error('Template name must be 100 characters or less');}if(templateData.settings && typeof templateData.settings !=='object'){throw new Error('Template settings must be an object');}}validateImportData(importData){this.validateTemplateData(importData);if(!importData.version){throw new Error('Import data must include version information');}const majorVersion=importData.version.split('.')[0];if(majorVersion !=='2'){throw new Error('Template version not compatible with current plugin version');}}setupEventListeners(){this.core.on('settings:changed',(data)=>{if(!this.previewMode && this.currentTemplate){this.currentTemplate=null;this.settingsManager.set('active_template','');}});document.addEventListener('click',(e)=>{if(e.target.matches('[data-template-action]')){this.handleTemplateAction(e);}});}async handleTemplateAction(e){e.preventDefault();const action=e.target.dataset.templateAction;const templateId=e.target.dataset.templateId;try{switch(action){case 'preview': await this.previewTemplate(templateId);break;case 'apply': await this.applyTemplate(templateId);break;case 'exit-preview': await this.exitPreview();break;case 'delete': if(confirm('Are you sure you want to delete this template?')){await this.deleteCustomTemplate(templateId);}break;case 'export': await this.exportTemplateViaAjax(templateId);break;case 'export-local': this.downloadTemplate(templateId);break;case 'import': this.triggerImportDialog();break;}}catch(error){console.error('Template action failed:',error);this.core.emit('template:error',{action,templateId,error});}}downloadTemplate(templateId){try{const exportData=this.exportTemplate(templateId);const template=this.getTemplate(templateId);const blob=new Blob([JSON.stringify(exportData,null,2)],{type: 'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`${template.name.toLowerCase().replace(/\s+/g,'-')}-template.json`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);}catch(error){console.error('Template download failed:',error);}}async exportTemplateViaAjax(templateId){try{const response=await this.ajaxManager.request('export_template',{template_id: templateId});if(response.success){const blob=new Blob([JSON.stringify(response.data.export_data,null,2)],{type: 'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=response.data.filename;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);this.core.emit('template:exported-ajax',{templateId,filename: response.data.filename});return true;}else{throw new Error(response.data.message || 'Export failed');}}catch(error){console.error('Template AJAX export failed:',error);throw error;}}async importTemplateFromFile(file){try{if(!file.type.includes('json')&& !file.name.endsWith('.json')){throw new Error('Please select a valid JSON file');}if(file.size > 1024*1024){throw new Error('File size too large. Maximum size is 1MB');}const fileContent=await this.readFileAsText(file);let importData;try{importData=JSON.parse(fileContent);}catch(parseError){throw new Error('Invalid JSON file format');}const validation=await this.validateImportData(importData);if(!validation.valid){throw new Error('Invalid template file: '+validation.errors.join(','));}const templateId=await this.importTemplate(importData);this.core.emit('template:imported-file',{templateId,filename: file.name,validation});return templateId;}catch(error){console.error('Template file import failed:',error);throw error;}}async validateImportData(importData){try{const response=await this.ajaxManager.request('validate_template_import',{import_data: JSON.stringify(importData)});if(response.success){return response.data;}else{throw new Error(response.data.message || 'Validation failed');}}catch(error){console.error('Import validation failed:',error);return{valid: false,errors: [error.message || 'Validation failed'],warnings: [],info: []};}}async importTemplateViaAjax(importData){try{const response=await this.ajaxManager.request('import_template',{import_data: JSON.stringify(importData)});if(response.success){this.templates.set(response.data.template_id,{...importData,id: response.data.template_id,type: 'custom',name: response.data.template_name});this.core.emit('template:imported-ajax',{templateId: response.data.template_id,templateName: response.data.template_name,originalName: response.data.original_name});return response.data.template_id;}else{throw new Error(response.data.message || 'Import failed');}}catch(error){console.error('Template AJAX import failed:',error);throw error;}}readFileAsText(file){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=(e)=>{resolve(e.target.result);};reader.onerror=()=>{reject(new Error('Failed to read file'));};reader.readAsText(file);});}createFileInput(){const input=document.createElement('input');input.type='file';input.accept='.json,application/json';input.style.display='none';input.addEventListener('change',async(e)=>{const file=e.target.files[0];if(file){try{await this.importTemplateFromFile(file);}catch(error){this.core.emit('template:import-error',{error});}}document.body.removeChild(input);});return input;}triggerImportDialog(){const input=this.createFileInput();document.body.appendChild(input);input.click();}getCurrentTemplate(){return this.currentTemplate;}isPreviewMode(){return this.previewMode;}}