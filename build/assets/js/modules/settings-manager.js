(function(window,document){'use strict';class SettingsManager{constructor(core){this.core=core;this.settings={};this.originalSettings={};this.debounceTimers=new Map();this.debounceDelay=300;this.broadcastChannel=null;this.storageEventBound=false;this.changeListeners=new Map();this.isDirty=false;this.init();}init(){this.setupMultiTabSync();this.loadSettings();this.setupAutoSave();this.core.log('SettingsManager initialized',{settingsCount: Object.keys(this.settings).length,hasBroadcastChannel: !!this.broadcastChannel});}setupMultiTabSync(){if(window.BroadcastChannel){try{this.broadcastChannel=new BroadcastChannel('las-settings');this.broadcastChannel.addEventListener('message',(event)=>{this.handleBroadcastMessage(event.data);});this.core.log('BroadcastChannel initialized for multi-tab sync');}catch(error){this.core.handleError('Failed to initialize BroadcastChannel',error);this.setupStorageEventFallback();}}else{this.setupStorageEventFallback();}}setupStorageEventFallback(){if(!this.storageEventBound){window.addEventListener('storage',(event)=>{if(event.key==='las-settings-sync'){try{const data=JSON.parse(event.newValue);this.handleSyncMessage(data);}catch(error){this.core.handleError('Failed to parse storage sync message',error);}}});this.storageEventBound=true;this.core.log('Storage event fallback initialized for multi-tab sync');}}handleBroadcastMessage(data){if(data.type==='settings-changed' && data.source !==this.getTabId()){this.handleSyncMessage(data);}}handleSyncMessage(data){if(data.settings){const oldSettings={...this.settings};this.settings={...this.settings,...data.settings};Object.keys(data.settings).forEach(key=>{if(oldSettings[key] !==data.settings[key]){this.notifyChangeListeners(key,data.settings[key],oldSettings[key],true);}});this.core.emit('settings:synced',{changes: data.settings,source: data.source});this.core.log('Settings synchronized from another tab',data.settings);}}getTabId(){if(!this.tabId){this.tabId='tab-'+Date.now()+'-'+Math.random().toString(36).substr(2,9);}return this.tabId;}loadSettings(){try{const localSettings=this.getFromLocalStorage();if(localSettings){this.settings={...localSettings};}this.loadFromServer();}catch(error){this.core.handleError('Failed to load settings',error);}}getFromLocalStorage(){try{const stored=localStorage.getItem('las-settings');return stored ? JSON.parse(stored): null;}catch(error){this.core.handleError('Failed to load from localStorage',error);return null;}}saveToLocalStorage(){try{localStorage.setItem('las-settings',JSON.stringify(this.settings));}catch(error){this.core.handleError('Failed to save to localStorage',error);}}async loadFromServer(){try{const ajaxManager=this.core.getModule('ajax-manager');if(!ajaxManager){this.core.log('AjaxManager not available,skipping server load');return;}const response=await ajaxManager.request('get_settings',{});if(response && response.settings){const serverSettings=response.settings;const mergedSettings={...this.settings,...serverSettings};const conflicts=this.detectConflicts(this.settings,serverSettings);if(conflicts.length > 0){this.core.emit('settings:conflicts',{conflicts,local: this.settings,server: serverSettings});}this.originalSettings={...serverSettings};this.settings=mergedSettings;this.saveToLocalStorage();this.core.emit('settings:loaded',{settings: this.settings});}}catch(error){this.core.handleError('Failed to load settings from server',error);}}detectConflicts(local,server){const conflicts=[];Object.keys(local).forEach(key=>{if(server.hasOwnProperty(key)&& local[key] !==server[key]){conflicts.push({key,local: local[key],server: server[key]});}});return conflicts;}get(key,defaultValue=null){try{if(key.includes('.')){return this.getNestedValue(this.settings,key,defaultValue);}return this.settings.hasOwnProperty(key)? this.settings[key] : defaultValue;}catch(error){this.core.handleError(`Failed to get setting: ${key}`,error);return defaultValue;}}set(key,value,immediate=false){try{const oldValue=this.get(key);if(key.includes('.')){this.setNestedValue(this.settings,key,value);}else{this.settings[key]=value;}this.isDirty=true;this.saveToLocalStorage();this.notifyChangeListeners(key,value,oldValue,false);this.core.emit('settings:changed',{key,value,oldValue});if(immediate){this.saveToServer();}else{this.debouncedSave(key);}this.broadcastChange(key,value);}catch(error){this.core.handleError(`Failed to set setting: ${key}`,error);}}setMultiple(settings,immediate=false){const changes={};Object.entries(settings).forEach(([key,value])=>{const oldValue=this.get(key);if(key.includes('.')){this.setNestedValue(this.settings,key,value);}else{this.settings[key]=value;}changes[key]={value,oldValue};this.notifyChangeListeners(key,value,oldValue,false);});this.isDirty=true;this.saveToLocalStorage();this.core.emit('settings:bulk-changed',{changes});if(immediate){this.saveToServer();}else{this.debouncedSave('bulk');}this.broadcastBulkChange(settings);}getNestedValue(obj,path,defaultValue){return path.split('.').reduce((current,key)=>{return(current && current[key] !==undefined)? current[key] : defaultValue;},obj);}setNestedValue(obj,path,value){const keys=path.split('.');const lastKey=keys.pop();const target=keys.reduce((current,key)=>{if(!current[key] || typeof current[key] !=='object'){current[key]={};}return current[key];},obj);target[lastKey]=value;}debouncedSave(key){if(this.debounceTimers.has(key)){clearTimeout(this.debounceTimers.get(key));}const timer=setTimeout(()=>{this.saveToServer();this.debounceTimers.delete(key);},this.debounceDelay);this.debounceTimers.set(key,timer);}async saveToServer(){if(!this.isDirty){return;}try{const ajaxManager=this.core.getModule('ajax-manager');if(!ajaxManager){this.core.log('AjaxManager not available,skipping server save');return;}const response=await ajaxManager.request('save_settings',{settings: this.settings});if(response && response.success){this.originalSettings={...this.settings};this.isDirty=false;this.core.emit('settings:saved',{settings: this.settings});this.core.log('Settings saved to server');}else{throw new Error(response?.message || 'Save failed');}}catch(error){this.core.handleError('Failed to save settings to server',error);this.core.emit('settings:save-failed',{error});}}setupAutoSave(){window.addEventListener('beforeunload',()=>{if(this.isDirty){this.saveWithBeacon();}});setInterval(()=>{if(this.isDirty){this.saveToServer();}},30000);}saveWithBeacon(){if(navigator.sendBeacon && this.core.config.ajaxUrl){const formData=new FormData();formData.append('action','las_save_settings');formData.append('settings',JSON.stringify(this.settings));formData.append('nonce',this.core.config.nonce);navigator.sendBeacon(this.core.config.ajaxUrl,formData);}}broadcastChange(key,value){const message={type: 'settings-changed',source: this.getTabId(),settings:{[key]: value},timestamp: Date.now()};if(this.broadcastChannel){this.broadcastChannel.postMessage(message);}else{localStorage.setItem('las-settings-sync',JSON.stringify(message));localStorage.removeItem('las-settings-sync');}}broadcastBulkChange(settings){const message={type: 'settings-changed',source: this.getTabId(),settings: settings,timestamp: Date.now()};if(this.broadcastChannel){this.broadcastChannel.postMessage(message);}else{localStorage.setItem('las-settings-sync',JSON.stringify(message));localStorage.removeItem('las-settings-sync');}}onChange(key,callback){if(!this.changeListeners.has(key)){this.changeListeners.set(key,[]);}this.changeListeners.get(key).push(callback);}offChange(key,callback){if(this.changeListeners.has(key)){const listeners=this.changeListeners.get(key);const index=listeners.indexOf(callback);if(index !==-1){listeners.splice(index,1);}}}notifyChangeListeners(key,newValue,oldValue,external=false){if(this.changeListeners.has(key)){this.changeListeners.get(key).forEach(callback=>{try{callback(newValue,oldValue,key,external);}catch(error){this.core.handleError(`Change listener error for ${key}`,error);}});}}reset(){this.settings={...this.originalSettings};this.isDirty=false;this.saveToLocalStorage();this.core.emit('settings:reset',{settings: this.settings});}hasUnsavedChanges(){return this.isDirty;}getAll(){return{...this.settings};}clear(){this.settings={};this.originalSettings={};this.isDirty=true;this.saveToLocalStorage();this.saveToServer();this.core.emit('settings:cleared');}destroy(){this.debounceTimers.forEach(timer=> clearTimeout(timer));this.debounceTimers.clear();if(this.broadcastChannel){this.broadcastChannel.close();}if(this.isDirty){this.saveWithBeacon();}this.core.log('SettingsManager destroyed');}}if(typeof module !=='undefined' && module.exports){module.exports=SettingsManager;}if(typeof define==='function' && define.amd){define([],function(){return SettingsManager;});}if(window.LAS && typeof window.LAS.registerModule==='function'){window.LAS.registerModule('settings-manager',SettingsManager);}window.LASSettingsManager=SettingsManager;})(window,document);