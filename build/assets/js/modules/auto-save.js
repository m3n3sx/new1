(function(window,document){'use strict';class AutoSave{constructor(core,options={}){this.core=core;this.options={debounceDelay: 2000,maxHistorySize: 50,enableKeyboardShortcuts: true,autoSaveInterval: 30000,storageKey: 'las_autosave_data',...options};this.isDirty=false;this.isSaving=false;this.lastSaveTime=null;this.currentState=null;this.history=[];this.historyIndex=-1;this.maxHistorySize=this.options.maxHistorySize;this.saveTimer=null;this.autoSaveTimer=null;this.trackedChanges=new Map();this.changeListeners=new Map();this.keyboardShortcuts=new Map([ ['ctrl+s',this.saveNow.bind(this)],['cmd+s',this.saveNow.bind(this)],['ctrl+z',this.undo.bind(this)],['cmd+z',this.undo.bind(this)],['ctrl+y',this.redo.bind(this)],['cmd+y',this.redo.bind(this)],['ctrl+shift+z',this.redo.bind(this)] ]);this.handleKeyDown=this.handleKeyDown.bind(this);this.handleBeforeUnload=this.handleBeforeUnload.bind(this);this.handleVisibilityChange=this.handleVisibilityChange.bind(this);this.init();}init(){this.setupEventListeners();this.loadInitialState();this.startAutoSaveTimer();this.core.log('AutoSave initialized',{debounceDelay: this.options.debounceDelay,maxHistorySize: this.maxHistorySize,keyboardShortcuts: this.options.enableKeyboardShortcuts});}setupEventListeners(){this.core.on('settings:changed',(data)=>{this.trackChange('setting',data.key,data.value,data.oldValue);});this.core.on('settings:bulk-changed',(data)=>{this.trackBulkChanges('settings',data.changes);});this.core.on('micro-panel:style-changed',(data)=>{this.trackChange('style',data.property,data.value,null,data.targetElement);});this.core.on('micro-panel:styles-saved',(data)=>{this.trackBulkChanges('styles',data.styles,data.targetElement);});if(this.options.enableKeyboardShortcuts){document.addEventListener('keydown',this.handleKeyDown);}window.addEventListener('beforeunload',this.handleBeforeUnload);document.addEventListener('visibilitychange',this.handleVisibilityChange);}loadInitialState(){try{const stored=localStorage.getItem(this.options.storageKey);if(stored){const data=JSON.parse(stored);if(data.state){this.currentState=data.state;}if(data.history && Array.isArray(data.history)){this.history=data.history.slice(-this.maxHistorySize);this.historyIndex=this.history.length-1;}if(data.lastSaveTime){this.lastSaveTime=new Date(data.lastSaveTime);}this.core.emit('auto-save:state-loaded',{state: this.currentState,historySize: this.history.length,lastSaveTime: this.lastSaveTime});}}catch(error){this.core.handleError('Failed to load auto-save state',error);}}trackChange(type,key,newValue,oldValue,element=null){const changeId=this.generateChangeId(type,key,element);const change={id: changeId,type: type,key: key,newValue: newValue,oldValue: oldValue,element: element ? this.getElementSelector(element): null,timestamp: Date.now()};this.trackedChanges.set(changeId,change);this.markDirty();this.notifyChangeListeners(change);this.debouncedSave();this.core.emit('auto-save:change-tracked',change);}trackBulkChanges(type,changes,element=null){const bulkChange={id: this.generateChangeId(type,'bulk',element),type: type,changes: changes,element: element ? this.getElementSelector(element): null,timestamp: Date.now()};Object.entries(changes).forEach(([key,change])=>{const changeId=this.generateChangeId(type,key,element);this.trackedChanges.set(changeId,{id: changeId,type: type,key: key,newValue: change.value || change,oldValue: change.oldValue || null,element: element ? this.getElementSelector(element): null,timestamp: Date.now()});});this.markDirty();this.debouncedSave();this.core.emit('auto-save:bulk-changes-tracked',bulkChange);}generateChangeId(type,key,element){const elementId=element ? this.getElementSelector(element): 'global';return `${type}:${elementId}:${key}`;}getElementSelector(element){if(element.id){return `#${element.id}`;}if(element.className){const classes=element.className.split(' ').filter(c=> c.trim());if(classes.length > 0){return `${element.tagName.toLowerCase()}.${classes[0]}`;}}return element.tagName.toLowerCase();}markDirty(){if(!this.isDirty){this.isDirty=true;this.core.emit('auto-save:dirty-state-changed',{isDirty: true});}}markClean(){if(this.isDirty){this.isDirty=false;this.core.emit('auto-save:dirty-state-changed',{isDirty: false});}}debouncedSave(){if(this.saveTimer){clearTimeout(this.saveTimer);}this.saveTimer=setTimeout(()=>{this.saveNow();},this.options.debounceDelay);this.core.emit('auto-save:save-scheduled',{delay: this.options.debounceDelay,changeCount: this.trackedChanges.size});}async saveNow(addToHistory=true){if(this.isSaving || !this.isDirty){return false;}this.isSaving=true;try{const state=await this.createStateSnapshot();if(addToHistory){this.addToHistory(state);}const success=await this.saveToServer(state);if(success){this.saveToLocalStorage(state);this.currentState=state;this.lastSaveTime=new Date();this.trackedChanges.clear();this.markClean();this.core.emit('auto-save:saved',{state: state,timestamp: this.lastSaveTime,historySize: this.history.length});this.core.log('Auto-save completed successfully');return true;}else{throw new Error('Server save failed');}}catch(error){this.core.handleError('Auto-save failed',error);this.core.emit('auto-save:save-failed',{error: error.message});return false;}finally{this.isSaving=false;}}async createStateSnapshot(){const settingsManager=this.core.getModule('settings-manager');const state={timestamp: Date.now(),settings: settingsManager ? settingsManager.getAll():{},changes: Array.from(this.trackedChanges.values()),metadata:{userAgent: navigator.userAgent,url: window.location.href,viewport:{width: window.innerWidth,height: window.innerHeight}}};return state;}async saveToServer(state){try{const ajaxManager=this.core.getModule('ajax-manager');if(!ajaxManager){this.core.log('AjaxManager not available,skipping server save');return true;}const response=await ajaxManager.request('auto_save_state',{state: state,timestamp: state.timestamp});return response && response.success;}catch(error){this.core.handleError('Failed to save to server',error);return false;}}saveToLocalStorage(state){try{const data={state: state,history: this.history,lastSaveTime: this.lastSaveTime ? this.lastSaveTime.toISOString(): null};localStorage.setItem(this.options.storageKey,JSON.stringify(data));}catch(error){this.core.handleError('Failed to save to localStorage',error);}}addToHistory(state){if(this.historyIndex < this.history.length-1){this.history=this.history.slice(0,this.historyIndex+1);}this.history.push(state);if(this.history.length > this.maxHistorySize){this.history=this.history.slice(-this.maxHistorySize);}this.historyIndex=this.history.length-1;this.core.emit('auto-save:history-updated',{historySize: this.history.length,currentIndex: this.historyIndex,canUndo: this.canUndo(),canRedo: this.canRedo()});}async undo(){if(!this.canUndo()){return false;}try{this.historyIndex--;const targetState=this.history[this.historyIndex];await this.restoreState(targetState);this.core.emit('auto-save:undo',{historyIndex: this.historyIndex,state: targetState,canUndo: this.canUndo(),canRedo: this.canRedo()});this.core.log('Undo completed',{historyIndex: this.historyIndex});return true;}catch(error){this.core.handleError('Undo failed',error);this.historyIndex++;return false;}}async redo(){if(!this.canRedo()){return false;}try{this.historyIndex++;const targetState=this.history[this.historyIndex];await this.restoreState(targetState);this.core.emit('auto-save:redo',{historyIndex: this.historyIndex,state: targetState,canUndo: this.canUndo(),canRedo: this.canRedo()});this.core.log('Redo completed',{historyIndex: this.historyIndex});return true;}catch(error){this.core.handleError('Redo failed',error);this.historyIndex--;return false;}}canUndo(){return this.historyIndex > 0;}canRedo(){return this.historyIndex < this.history.length-1;}async restoreState(state){const settingsManager=this.core.getModule('settings-manager');if(settingsManager && state.settings){settingsManager.setMultiple(state.settings,true);}if(state.changes){state.changes.forEach(change=>{if(change.type==='style' && change.element){const element=document.querySelector(change.element);if(element){element.style.setProperty(change.key,change.newValue);}}});}this.currentState=state;this.trackedChanges.clear();this.markClean();}handleKeyDown(event){const key=this.getKeyboardShortcut(event);const handler=this.keyboardShortcuts.get(key);if(handler){event.preventDefault();handler();}}getKeyboardShortcut(event){const parts=[];if(event.ctrlKey)parts.push('ctrl');if(event.metaKey)parts.push('cmd');if(event.shiftKey)parts.push('shift');if(event.altKey)parts.push('alt');parts.push(event.key.toLowerCase());return parts.join('+');}handleBeforeUnload(event){if(this.isDirty){this.saveWithBeacon();const message='You have unsaved changes. Are you sure you want to leave?';event.returnValue=message;return message;}}handleVisibilityChange(){if(document.hidden && this.isDirty){this.saveNow();}}saveWithBeacon(){if(!navigator.sendBeacon || !this.core.config.ajaxUrl){return;}try{const state={timestamp: Date.now(),settings: this.core.getModule('settings-manager')?.getAll()||{},changes: Array.from(this.trackedChanges.values())};const formData=new FormData();formData.append('action','las_auto_save_beacon');formData.append('state',JSON.stringify(state));formData.append('nonce',this.core.config.nonce);navigator.sendBeacon(this.core.config.ajaxUrl,formData);}catch(error){this.core.handleError('Beacon save failed',error);}}startAutoSaveTimer(){if(this.autoSaveTimer){clearInterval(this.autoSaveTimer);}this.autoSaveTimer=setInterval(()=>{if(this.isDirty && !this.isSaving){this.saveNow();}},this.options.autoSaveInterval);}stopAutoSaveTimer(){if(this.autoSaveTimer){clearInterval(this.autoSaveTimer);this.autoSaveTimer=null;}}onChangeTracked(type,callback){if(!this.changeListeners.has(type)){this.changeListeners.set(type,[]);}this.changeListeners.get(type).push(callback);}offChangeTracked(type,callback){if(this.changeListeners.has(type)){const listeners=this.changeListeners.get(type);const index=listeners.indexOf(callback);if(index !==-1){listeners.splice(index,1);}}}notifyChangeListeners(change){const listeners=this.changeListeners.get(change.type)|| [];listeners.forEach(callback=>{try{callback(change);}catch(error){this.core.handleError(`Change listener error for ${change.type}`,error);}});}getStatus(){return{isDirty: this.isDirty,isSaving: this.isSaving,lastSaveTime: this.lastSaveTime,changeCount: this.trackedChanges.size,historySize: this.history.length,historyIndex: this.historyIndex,canUndo: this.canUndo(),canRedo: this.canRedo()};}clear(){this.trackedChanges.clear();this.history=[];this.historyIndex=-1;this.currentState=null;this.markClean();try{localStorage.removeItem(this.options.storageKey);}catch(error){this.core.handleError('Failed to clear localStorage',error);}this.core.emit('auto-save:cleared');}destroy(){if(this.isDirty){this.saveWithBeacon();}if(this.saveTimer){clearTimeout(this.saveTimer);}this.stopAutoSaveTimer();if(this.options.enableKeyboardShortcuts){document.removeEventListener('keydown',this.handleKeyDown);}window.removeEventListener('beforeunload',this.handleBeforeUnload);document.removeEventListener('visibilitychange',this.handleVisibilityChange);this.trackedChanges.clear();this.changeListeners.clear();this.history=[];this.core.log('AutoSave destroyed');}}if(typeof module !=='undefined' && module.exports){module.exports=AutoSave;}if(typeof define==='function' && define.amd){define([],function(){return AutoSave;});}if(window.LAS && typeof window.LAS.registerModule==='function'){window.LAS.registerModule('auto-save',AutoSave);}window.LASAutoSave=AutoSave;})(window,document);