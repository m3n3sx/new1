class ResponsiveManager{constructor(){this.breakpoints={mobile: '(min-width: 320px)and(max-width: 767px)',mobileTiny: '(max-width: 319px)',tablet: '(min-width: 768px)and(max-width: 1023px)',desktop: '(min-width: 1024px)and(max-width: 1439px)',large: '(min-width: 1440px)'};this.currentBreakpoint=this.getCurrentBreakpoint();this.mediaQueries={};this.listeners=[];this.init();}getCurrentBreakpoint(){for(const [name,query] of Object.entries(this.breakpoints)){if(window.matchMedia && window.matchMedia(query).matches){return name;}}return 'desktop';}init(){if(!window.matchMedia){console.warn('ResponsiveManager: matchMedia not supported');return;}Object.entries(this.breakpoints).forEach(([name,query])=>{const mq=window.matchMedia(query);this.mediaQueries[name]=mq;const handler=(e)=>{if(e.matches){this.handleBreakpointChange(name);}};if(mq.addEventListener){mq.addEventListener('change',handler);}else if(mq.addListener){mq.addListener(handler);}});this.handleBreakpointChange(this.currentBreakpoint);this.updateDocumentClasses();}handleBreakpointChange(newBreakpoint){const previousBreakpoint=this.currentBreakpoint;this.currentBreakpoint=newBreakpoint;this.updateDocumentClasses();this.dispatchBreakpointChange(previousBreakpoint,newBreakpoint);this.notifyListeners(newBreakpoint,previousBreakpoint);}updateDocumentClasses(){const docElement=document.documentElement;Object.keys(this.breakpoints).forEach(bp=>{docElement.classList.remove(`las-bp-${bp}`);});docElement.classList.add(`las-bp-${this.currentBreakpoint}`);docElement.classList.toggle('las-mobile-tiny',this.isMobileTiny());docElement.classList.toggle('las-mobile',this.isMobile());docElement.classList.toggle('las-tablet',this.isTablet());docElement.classList.toggle('las-desktop',this.isDesktop());docElement.classList.toggle('las-large',this.isLarge());docElement.classList.toggle('las-touch',this.isTouchDevice());}dispatchBreakpointChange(previous,current){const event=new CustomEvent('las-breakpoint-change',{detail:{breakpoint: current,previousBreakpoint: previous,isMobileTiny: this.isMobileTiny(),isMobile: this.isMobile(),isTablet: this.isTablet(),isDesktop: this.isDesktop(),isLarge: this.isLarge(),isTouchDevice: this.isTouchDevice(),viewport: this.getViewportSize()}});window.dispatchEvent(event);if(document.dispatchEvent){document.dispatchEvent(event);}}notifyListeners(current,previous){this.listeners.forEach(listener=>{try{listener({breakpoint: current,previousBreakpoint: previous,manager: this});}catch(error){console.error('ResponsiveManager: Error in breakpoint listener:',error);}});}isMobile(){return this.currentBreakpoint==='mobile';}isMobileTiny(){return this.currentBreakpoint==='mobileTiny';}isTablet(){return this.currentBreakpoint==='tablet';}isDesktop(){return this.currentBreakpoint==='desktop';}isLarge(){return this.currentBreakpoint==='large';}isTouchDevice(){return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;}isMobileViewport(){return this.isMobileTiny()|| this.isMobile()|| this.isTablet();}isAnyMobile(){return this.isMobileTiny()|| this.isMobile();}isDesktopViewport(){return this.isDesktop()|| this.isLarge();}getViewportSize(){return{width: window.innerWidth || document.documentElement.clientWidth,height: window.innerHeight || document.documentElement.clientHeight};}onBreakpointChange(callback){this.listeners.push(callback);return()=>{const index=this.listeners.indexOf(callback);if(index >-1){this.listeners.splice(index,1);}};}isBreakpoint(breakpoint){return this.currentBreakpoint===breakpoint;}matchesQuery(query){if(!window.matchMedia){return false;}return window.matchMedia(query).matches;}getBreakpointInfo(){return{current: this.currentBreakpoint,isMobileTiny: this.isMobileTiny(),isMobile: this.isMobile(),isTablet: this.isTablet(),isDesktop: this.isDesktop(),isLarge: this.isLarge(),isTouchDevice: this.isTouchDevice(),isAnyMobile: this.isAnyMobile(),isMobileViewport: this.isMobileViewport(),isDesktopViewport: this.isDesktopViewport(),viewport: this.getViewportSize(),breakpoints:{...this.breakpoints}};}addBreakpoint(name,query){if(this.breakpoints[name]){console.warn(`ResponsiveManager: Breakpoint '${name}' already exists`);return;}this.breakpoints[name]=query;if(window.matchMedia){const mq=window.matchMedia(query);this.mediaQueries[name]=mq;const handler=(e)=>{if(e.matches){this.handleBreakpointChange(name);}};if(mq.addEventListener){mq.addEventListener('change',handler);}else if(mq.addListener){mq.addListener(handler);}}}removeBreakpoint(name){if(!this.breakpoints[name]){console.warn(`ResponsiveManager: Breakpoint '${name}' does not exist`);return;}const defaultBreakpoints=['mobile','tablet','desktop','large'];if(defaultBreakpoints.includes(name)){console.warn(`ResponsiveManager: Cannot remove default breakpoint '${name}'`);return;}delete this.breakpoints[name];delete this.mediaQueries[name];if(this.currentBreakpoint===name){this.currentBreakpoint=this.getCurrentBreakpoint();this.updateDocumentClasses();}}getStats(){return{currentBreakpoint: this.currentBreakpoint,viewport: this.getViewportSize(),isTouchDevice: this.isTouchDevice(),supportsMatchMedia: !!window.matchMedia,breakpointCount: Object.keys(this.breakpoints).length,listenerCount: this.listeners.length,breakpoints:{...this.breakpoints}};}}if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',()=>{window.lasResponsiveManager=new ResponsiveManager();});}else{window.lasResponsiveManager=new ResponsiveManager();}if(typeof module !=='undefined' && module.exports){module.exports=ResponsiveManager;}if(typeof define==='function' && define.amd){define([],function(){return ResponsiveManager;});}