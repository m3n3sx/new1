(function($){'use strict';class CommunicationManager{constructor(config={}){this.config={maxRetries: 3,baseDelay: 1000,maxDelay: 30000,timeout: 30000,...config};this.requestQueue=new Map();this.activeRequests=new Map();this.eventListeners=new Map();this.init();}init(){this.setupErrorHandling();this.setupQueueProcessor();this.setupNetworkMonitoring();this.bindEvents();}ajax(action,data={},options={}){const requestId=this.generateRequestId();const defaultOptions={method: 'POST',timeout: this.config.timeout,retries: this.config.maxRetries,nonce: lasComm.nonces.ajax,onProgress: null,onRetry: null};options={...defaultOptions,...options};const requestData={action: action,nonce: options.nonce,...data};return this.makeRequest('ajax',requestId,{url: lasComm.ajaxUrl,method: options.method,data: requestData,timeout: options.timeout},options);}rest(endpoint,data={},options={}){const requestId=this.generateRequestId();const defaultOptions={method: 'GET',timeout: this.config.timeout,retries: this.config.maxRetries,headers:{'X-WP-Nonce': lasComm.nonces.rest,'Content-Type': 'application/json'},onProgress: null,onRetry: null};options={...defaultOptions,...options};const url=lasComm.restUrl+endpoint.replace(/^\ const requestConfig={url: url,method: options.method,headers: options.headers,timeout: options.timeout};if(options.method==='GET'){requestConfig.data=data;}else{requestConfig.data=JSON.stringify(data);}return this.makeRequest('rest',requestId,requestConfig,options);}makeRequest(type,requestId,config,options){return new Promise((resolve,reject)=>{const requestInfo={id: requestId,type: type,config: config,options: options,attempts: 0,resolve: resolve,reject: reject,startTime: Date.now()};this.activeRequests.set(requestId,requestInfo);this.attemptRequest(requestInfo);});}attemptRequest(requestInfo){requestInfo.attempts++;const ajaxConfig={url: requestInfo.config.url,method: requestInfo.config.method,data: requestInfo.config.data,timeout: requestInfo.config.timeout,headers: requestInfo.config.headers ||{},success:(response)=>{this.handleSuccess(requestInfo,response);},error:(xhr,status,error)=>{this.handleError(requestInfo,xhr,status,error);}};if(requestInfo.options.onProgress){ajaxConfig.xhr=()=>{const xhr=new XMLHttpRequest();xhr.upload.addEventListener('progress',requestInfo.options.onProgress);return xhr;};}$.ajax(ajaxConfig);}handleSuccess(requestInfo,response){const duration=Date.now()-requestInfo.startTime;this.activeRequests.delete(requestInfo.id);this.logRequest(requestInfo,'success',duration);this.emit('request:success',{requestId: requestInfo.id,type: requestInfo.type,duration: duration,response: response});requestInfo.resolve(response);}handleError(requestInfo,xhr,status,error){const duration=Date.now()-requestInfo.startTime;const shouldRetry=this.shouldRetry(requestInfo,xhr,status,error);if(shouldRetry && requestInfo.attempts < requestInfo.options.retries){this.queueForRetry(requestInfo);return;}this.activeRequests.delete(requestInfo.id);this.logRequest(requestInfo,'error',duration,error);const errorObj=this.createErrorObject(xhr,status,error);this.emit('request:error',{requestId: requestInfo.id,type: requestInfo.type,duration: duration,error: errorObj,attempts: requestInfo.attempts});requestInfo.reject(errorObj);}shouldRetry(requestInfo,xhr,status,error){if(requestInfo.attempts >=requestInfo.options.retries){return false;}if(xhr.status >=400 && xhr.status < 500){return false;}return status==='timeout' || status==='error' || xhr.status===0 || xhr.status >=500;}queueForRetry(requestInfo){const delay=Math.min(this.config.baseDelay*Math.pow(2,requestInfo.attempts-1),this.config.maxDelay);const jitter=Math.random()*0.1*delay;const finalDelay=delay+jitter;const retryTime=Date.now()+finalDelay;requestInfo.retryTime=retryTime;this.requestQueue.set(requestInfo.id,requestInfo);if(requestInfo.options.onRetry){requestInfo.options.onRetry(requestInfo.attempts,finalDelay);}this.emit('request:retry',{requestId: requestInfo.id,attempt: requestInfo.attempts,delay: finalDelay,retryTime: retryTime});this.showRetryNotification(requestInfo,finalDelay);}processRetryQueue(){const currentTime=Date.now();const toRetry=[];for(const [requestId,requestInfo] of this.requestQueue){if(requestInfo.retryTime <=currentTime){toRetry.push(requestInfo);this.requestQueue.delete(requestId);}}toRetry.forEach(requestInfo=>{this.activeRequests.set(requestInfo.id,requestInfo);this.attemptRequest(requestInfo);});}setupQueueProcessor(){setInterval(()=>{this.processRetryQueue();},1000);}setupErrorHandling(){$(document).ajaxError((event,xhr,settings,error)=>{if(settings.url && settings.url.includes('las_')){console.warn('LAS AJAX Error:',error,xhr);}});}setupNetworkMonitoring(){if('navigator' in window && 'onLine' in navigator){window.addEventListener('online',()=>{this.emit('network:online');this.processRetryQueue();});window.addEventListener('offline',()=>{this.emit('network:offline');});}}bindEvents(){window.addEventListener('beforeunload',()=>{this.processRetryQueue();});}showRetryNotification(requestInfo,delay){const message=lasComm.strings.retryFailed || 'Request failed. Retrying...';let notification=document.getElementById('las-retry-notification');if(!notification){notification=document.createElement('div');notification.id='las-retry-notification';notification.className='las-notification las-notification-warning';notification.style.cssText=` position: fixed;top: 32px;right: 20px;background: #fff3cd;border: 1px solid #ffeaa7;color: #856404;padding: 12px 16px;border-radius: 4px;box-shadow: 0 2px 8px rgba(0,0,0,0.1);z-index: 999999;font-size: 14px;max-width: 300px;`;document.body.appendChild(notification);}notification.textContent=`${message}(Attempt ${requestInfo.attempts}/${requestInfo.options.retries})`;setTimeout(()=>{if(notification && notification.parentNode){notification.parentNode.removeChild(notification);}},Math.min(delay,5000));}createErrorObject(xhr,status,error){let errorObj={status: xhr.status,statusText: xhr.statusText,type: status,message: error};try{const response=JSON.parse(xhr.responseText);if(response.error){errorObj={...errorObj,...response.error};}}catch(e){errorObj.responseText=xhr.responseText;}return errorObj;}generateRequestId(){return 'req_'+Date.now()+'_'+Math.random().toString(36).substr(2,9);}logRequest(requestInfo,status,duration,error=''){if(window.console && console.log){const logData={id: requestInfo.id,type: requestInfo.type,status: status,duration: duration+'ms',attempts: requestInfo.attempts};if(error){logData.error=error;}console.log('[LAS Communication]',logData);}}on(event,callback){if(!this.eventListeners.has(event)){this.eventListeners.set(event,[]);}this.eventListeners.get(event).push(callback);}off(event,callback){if(this.eventListeners.has(event)){const listeners=this.eventListeners.get(event);const index=listeners.indexOf(callback);if(index >-1){listeners.splice(index,1);}}}emit(event,data){if(this.eventListeners.has(event)){this.eventListeners.get(event).forEach(callback=>{try{callback(data);}catch(e){console.error('Event listener error:',e);}});}}getActiveRequestsCount(){return this.activeRequests.size;}getQueuedRequestsCount(){return this.requestQueue.size;}cancelRequest(requestId){if(this.activeRequests.has(requestId)){this.activeRequests.delete(requestId);return true;}if(this.requestQueue.has(requestId)){this.requestQueue.delete(requestId);return true;}return false;}clearQueue(){this.requestQueue.clear();}getStatistics(){return{activeRequests: this.activeRequests.size,queuedRequests: this.requestQueue.size,config: this.config};}}window.LAS=window.LAS ||{};window.LAS.Communication=new CommunicationManager(lasComm.config);$.fn.lasAjax=function(action,data,options){return window.LAS.Communication.ajax(action,data,options);};$.fn.lasRest=function(endpoint,data,options){return window.LAS.Communication.rest(endpoint,data,options);};})(jQuery);